<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>docker</title>
      <link href="/2020/08/31/docker/"/>
      <url>/2020/08/31/docker/</url>
      
        <content type="html"><![CDATA[<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">docker pull mysql<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">docker run <span class="hljs-literal">-p</span> <span class="hljs-number">3306</span>:<span class="hljs-number">3306</span> -<span class="hljs-literal">-name</span> mysql  <span class="hljs-literal">-v</span> E:\docker\mysql:/var/lib/mysq <span class="hljs-literal">-v</span> E:\docker\mysqlConfig:/etc/mysql/conf.d <span class="hljs-literal">-e</span> MYSQL_ROOT_PASSWORD=<span class="hljs-number">123456</span> <span class="hljs-literal">-d</span> mysql<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker port # 查看映射端口对应的容器内部源端口<br>docker pause # 暂停容器<br>docker ps # 猎户容器列表<br>docker pull # 从docker镜像源服务器拉取指定镜像或者库镜像<br>docker push # 推送指定镜像或者库镜像至docker源服务器<br>docker restart # 重启运行的容器<br>docker rm # 移除一个或多个容器<br>docker rmi # 移除一个或多个镜像 （无容器使用该镜像才可删除，否则需要删除相关容器才可继续或 -f 强制删除）<br>docker run # 创建一个新的容器并运行一个命令<br>docker save # 保存一个镜像为一个 tar 包【对应 load】<br>docker search # 在 docker hub 中搜索镜像<br>docker start # 启动容器<br>docker stop # 停止容器<br>docker tag # 给源中镜像打标签<br>docker top # 查看容器中运行的进程信息<br>docker unpause # 取消暂停容器<br>docker version # 查看 docker版本号<br>docker wait # 截取容器停止时的退出状态值<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs powershell">attach <span class="hljs-comment"># 当前shell下attach连接指定运行镜像</span><br>build <span class="hljs-comment"># 通过Dockerfile定制镜像</span><br>commit <span class="hljs-comment"># 提交当前容器为新的镜像</span><br><span class="hljs-built_in">cp</span> <span class="hljs-comment"># 从容器中拷贝指定文件或目录到宿主机中</span><br>create <span class="hljs-comment"># 创建一个新的容器，同 run 但不启动容器</span><br><span class="hljs-built_in">diff</span> <span class="hljs-comment"># 查看 docker 容器变化</span><br>events <span class="hljs-comment"># 从docker服务器获取容器实时事件</span><br>exec <span class="hljs-comment"># 在已存在的容器上运行命令</span><br>export <span class="hljs-comment"># 导出容器的内容流作为一个 tar 归档文件【对应 import】</span><br><span class="hljs-built_in">history</span> <span class="hljs-comment"># 展示一个镜像形成历史</span><br>images <span class="hljs-comment"># 列出系统当前镜像</span><br>import <span class="hljs-comment"># 从tar包中的内容创建一个新的文件系统映像【对应 export】</span><br>info <span class="hljs-comment"># 显示系统相关信息</span><br>inspect <span class="hljs-comment"># 查看容器详细信息</span><br><span class="hljs-built_in">kill</span> <span class="hljs-comment"># kill 指定的容器</span><br>load <span class="hljs-comment"># 从一个 tar 包中加载一个镜像【对应 save】</span><br>login <span class="hljs-comment"># 注册或者登录一个 docker 源服务器</span><br>logout <span class="hljs-comment"># 从当前 Docekr registry 退出</span><br>logs <span class="hljs-comment"># 输出当前容器日志信息</span><br></code></pre></td></tr></table></figure><p>待更</p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shiro+jwt</title>
      <link href="/2020/08/28/jwt+shiro/"/>
      <url>/2020/08/28/jwt+shiro/</url>
      
        <content type="html"><![CDATA[<p>待更</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shiro jwt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot整合shiro</title>
      <link href="/2020/08/28/jwt/"/>
      <url>/2020/08/28/jwt/</url>
      
        <content type="html"><![CDATA[<p>待更</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot整合jwt</title>
      <link href="/2020/08/28/shiro/"/>
      <url>/2020/08/28/shiro/</url>
      
        <content type="html"><![CDATA[<p>待更</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-element-admin</title>
      <link href="/2020/08/28/vue-eletment-admin/"/>
      <url>/2020/08/28/vue-eletment-admin/</url>
      
        <content type="html"><![CDATA[<h1 id="vue-element-admin"><a href="#vue-element-admin" class="headerlink" title="vue-element-admin"></a><a href="https://panjiachen.gitee.io/vue-element-admin-site/zh/">vue-element-admin</a></h1><h1 id="登录成功-但发生请求但-Shiro-判断为未登录"><a href="#登录成功-但发生请求但-Shiro-判断为未登录" class="headerlink" title="登录成功 但发生请求但 Shiro 判断为未登录"></a>登录成功 但发生请求但 Shiro 判断为未登录</h1><p>前端使用vue-element-admin  </p><p>后端采用spring shiro jwt</p><p>前端登录成功返回token，但当通过shiro的权限判断时，</p><p>被factoryBean.setLoginUrl(“/Service/unlogin”); 重定向到未登录。</p><p>页面跳转时应该请求头带上 cookie</p><p>vue-element-admin  默认不发送cookie </p><p>找到request.js并</p><p>启动 withCredentials: true  即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> service = axios.create(&#123;<br>  baseURL: process.env.VUE_APP_BASE_API, <span class="hljs-comment">// url = base url + request url</span><br>  withCredentials: <span class="hljs-literal">true</span>, <span class="hljs-comment">// send cookies when cross-domain requests</span><br>  timeout: <span class="hljs-number">5000</span> <span class="hljs-comment">// request timeout</span><br>&#125;)<br></code></pre></td></tr></table></figure><hr><h1 id="响应中的“Access-Control-Allow-origin”头的值不能是通配符“-”"><a href="#响应中的“Access-Control-Allow-origin”头的值不能是通配符“-”" class="headerlink" title="响应中的“Access Control Allow origin”头的值不能是通配符“*”"></a>响应中的“Access Control Allow origin”头的值不能是通配符“*”</h1><p>vue报错信息之跨域当请求的凭据模式为“include”时，响应中的“Access Control Allow origin”头的值不能是通配符“*”</p><p>CORS策略已阻止从源位置“<a href="http://localhost:3000/api/index/getNotice%E2%80%9D%E8%AE%BF%E9%97%AEXMLHttpRequest:http://localhost:8080%E2%80%9D%EF%BC%9A%E5%BD%93%E8%AF%B7%E6%B1%82%E7%9A%84%E5%87%AD%E6%8D%AE%E6%A8%A1%E5%BC%8F%E4%B8%BA%E2%80%9Cinclude%E2%80%9D%E6%97%B6%EF%BC%8C%E5%93%8D%E5%BA%94%E4%B8%AD%E7%9A%84%E2%80%9CAccess">http://localhost:3000/api/index/getNotice”访问XMLHttpRequest:http://localhost:8080”：当请求的凭据模式为“include”时，响应中的“Access</a> Control Allow origin”头的值不能是通配符“*”。XMLHttpRequest启动的请求的凭据模式由withCredentials属性控制。</p><p>这样的结果可能是你在前端开启了withCredentials影响的，这时后台要添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">response.setHeader(&quot;Access-Control-Allow-Origin&quot;,&quot;Origin地址 如 http:&#x2F;&#x2F;localhost:9528&quot;);<br>response.setHeader(&quot;Access-Control-Allow-Credentials&quot;,&quot;true&quot;);<br></code></pre></td></tr></table></figure><hr><h1 id="Added-non-passive-event-listener-to-a-scroll-blocking-‘mousewheel’-event-告警"><a href="#Added-non-passive-event-listener-to-a-scroll-blocking-‘mousewheel’-event-告警" class="headerlink" title="Added non-passive event listener to a scroll-blocking ‘mousewheel’ event.告警"></a>Added non-passive event listener to a scroll-blocking ‘mousewheel’ event.告警</h1><h2 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h2><p>详解：<a href="https://www.cnblogs.com/PopularProdigal/p/8005783.html">https://www.cnblogs.com/PopularProdigal/p/8005783.html</a><br>Chrome51 版本以后，Chrome 增加了新的事件捕获机制－Passive Event Listeners。<br>Passive Event Listeners：就是告诉前页面内的事件监听器内部是否会调用preventDefault函数来阻止事件的默认行为，以便浏览器根据这个信息更好地做出决策来优化页面性能。当属性passive的值为true的时候，代表该监听器内部不会调用preventDefault函数来阻止默认滑动行为，Chrome浏览器称这类型的监听器为被动（passive）监听器。目前Chrome主要利用该特性来优化页面的滑动性能，所以Passive Event Listeners特性当前仅支持mousewheel/touch相关事件。</p><h2 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">1、npm i default-passive-events -S<br>2、main.js中加入：import &#39;default-passive-events&#39;<br></code></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/u010622874/article/details/104396342">https://blog.csdn.net/u010622874/article/details/104396342</a></p><hr><h1 id="端口跨域方案1-前端解决"><a href="#端口跨域方案1-前端解决" class="headerlink" title="端口跨域方案1   前端解决"></a>端口跨域方案1   前端解决</h1><p>vue.config.js中添加代理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">proxy: &#123;<br>  [process.env.VUE_APP_BASE_API]: &#123;<br>    target: <span class="hljs-string">&#x27;http://localhost:8082&#x27;</span>, <span class="hljs-comment">// 要请求的地址</span><br>    ws: <span class="hljs-literal">true</span>,<br>    changeOrigin: <span class="hljs-literal">true</span>,<br>    pathRewrite: &#123;<br>      [<span class="hljs-string">&#x27;^&#x27;</span>+process.env.VUE_APP_BASE_API]: <span class="hljs-string">&#x27;&#x27;</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>.env.development中 设置VUE_APP_BASE_API为空</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">VUE_APP_BASE_API = <span class="hljs-string">&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><hr><h1 id="端口跨域2-后端解决"><a href="#端口跨域2-后端解决" class="headerlink" title="端口跨域2 后端解决"></a>端口跨域2 后端解决</h1><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p>springboot中</p><p>添加注解@CrossOrigin</p><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><p>WEBMvcConfigurer扩展类中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> FilterRegistrationBean <span class="hljs-title">filterRegistrationBean</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 对响应头进行CORS授权</span><br>    MyCorsRegistration corsRegistration = <span class="hljs-keyword">new</span> MyCorsRegistration(<span class="hljs-string">&quot;/**&quot;</span>);<br>    corsRegistration.allowedOrigins(<span class="hljs-string">&quot;*&quot;</span>)<br>            .allowedMethods(HttpMethod.GET.name(), HttpMethod.HEAD.name(), HttpMethod.POST.name(),<br>                    HttpMethod.PUT.name(), HttpMethod.OPTIONS.name())<br>            .allowedHeaders(<span class="hljs-string">&quot;Accept&quot;</span>, <span class="hljs-string">&quot;Origin&quot;</span>, <span class="hljs-string">&quot;X-Requested-With&quot;</span>, <span class="hljs-string">&quot;Content-Type&quot;</span>,<br>                    <span class="hljs-string">&quot;Last-Modified&quot;</span>, <span class="hljs-string">&quot;device&quot;</span>, <span class="hljs-string">&quot;token&quot;</span>)<br>            .exposedHeaders(HttpHeaders.SET_COOKIE)<br>            .allowCredentials(<span class="hljs-keyword">true</span>)<br>            .maxAge(<span class="hljs-number">3600</span>);<br><br>    <span class="hljs-comment">// 注册CORS过滤器</span><br>    UrlBasedCorsConfigurationSource configurationSource = <span class="hljs-keyword">new</span> UrlBasedCorsConfigurationSource();<br>    configurationSource.registerCorsConfiguration(<span class="hljs-string">&quot;/**&quot;</span>, corsRegistration.getCorsConfiguration());<br>    CorsFilter corsFilter = <span class="hljs-keyword">new</span> CorsFilter(configurationSource);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> FilterRegistrationBean(corsFilter);<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs plain">import org.springframework.web.cors.CorsConfiguration;<br>import org.springframework.web.servlet.config.annotation.CorsRegistration;<br><br>&#x2F;**<br> * &lt;p&gt;<br> * kuayu<br> * &lt;&#x2F;p&gt;<br> *<br> * @author 等什么柠檬君<br> * @since 2020&#x2F;8&#x2F;28<br> *&#x2F;<br>public class MyCorsRegistration extends CorsRegistration &#123;<br><br><br><br>    public MyCorsRegistration(String pathPattern) &#123;<br>        super(pathPattern);<br>    &#125;<br><br><br>    @Override<br>    public CorsConfiguration getCorsConfiguration() &#123;<br>        return super.getCorsConfiguration();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="jwt拦截器"><a href="#jwt拦截器" class="headerlink" title="jwt拦截器"></a>jwt拦截器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">preHandle中添加<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Headers&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>);<br>response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>,<span class="hljs-string">&quot;*&quot;</span>);<br>response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Credentials&quot;</span>,<span class="hljs-string">&quot;true&quot;</span>);<br>response.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>response.setContentType(<span class="hljs-string">&quot;application/json&quot;</span>);<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>乐心步数助手服务端</title>
      <link href="/2020/08/22/%E4%B9%90%E5%BF%83%E6%AD%A5%E6%95%B0%E5%8A%A9%E6%89%8B%E6%9C%8D%E5%8A%A1%E7%AB%AF/"/>
      <url>/2020/08/22/%E4%B9%90%E5%BF%83%E6%AD%A5%E6%95%B0%E5%8A%A9%E6%89%8B%E6%9C%8D%E5%8A%A1%E7%AB%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h1><p>此处以宝塔面板做演示</p><p><img src= "/img/loading.gif" data-lazy-src="https://testchengzzz.oss-cn-shanghai.aliyuncs.com/img/20200822151158.png"></p><p>进入站点根目录，上传jar包，等待上传完成</p><h1 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h1><p><img src= "/img/loading.gif" data-lazy-src="https://testchengzzz.oss-cn-shanghai.aliyuncs.com/img/20200822151526.png"></p><p>创建名为 <code>mysteps</code> 的数据库</p><p>用户名设置为 <code>mystep</code></p><p>密码设置为 <code>root</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://testchengzzz.oss-cn-shanghai.aliyuncs.com/img/20200822151618.png"></p><p>进入管理</p><p><img src= "/img/loading.gif" data-lazy-src="https://testchengzzz.oss-cn-shanghai.aliyuncs.com/img/20200822151650.png"></p><p>mysteps—&gt;导入—&gt;选择文件导入mysteps.sql—&gt;点击执行</p><p>数据库导入完成</p><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><p><img src= "/img/loading.gif" data-lazy-src="https://testchengzzz.oss-cn-shanghai.aliyuncs.com/img/20200822152901.png"></p><p>进入终端，进入站点根目录。即文件上传目录</p><p>输入以下命令启动服务，若你想保持前台运行 输入java -jar StepService.jar</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -jar StepService.jar &amp;<br></code></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://testchengzzz.oss-cn-shanghai.aliyuncs.com/img/20200822163857.png"></p><p>如图所示表示启动成功</p><p>若出现8080端口占用情况如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">***************************<br>APPLICATION FAILED TO START<br>***************************<br><br>Description:<br><br>Web server failed to start. Port 8080 was already <span class="hljs-keyword">in</span> use.<br><br>Action:<br><br>Identify and stop the process that<span class="hljs-string">&#x27;s listening on port 8080 or configure this application to listenon another port.</span><br></code></pre></td></tr></table></figure><p>需停止占用端口的应用 方法如下</p><ol><li><p>netstat -lnp|grep 80</p><p><img src= "/img/loading.gif" data-lazy-src="https://testchengzzz.oss-cn-shanghai.aliyuncs.com/img/20200822153434.png"></p></li><li><p>kill -9 12095</p></li><li><p>netstat -lnp|grep 80</p><p>然后重新 使用 java -jar StepService.jar &amp; 运行服务</p></li></ol><hr><h1 id="接口文档"><a href="#接口文档" class="headerlink" title="接口文档"></a>接口文档</h1><p>参数说明：</p><p>phone        手机号</p><p>password  密码</p><p>steps          提交的步数</p><p>flag             是否开启自动刷步   0为不自动刷步  1为自动刷步   刷步时间为每日中午12点</p><h2 id="单次提交步数"><a href="#单次提交步数" class="headerlink" title="单次提交步数"></a>单次提交步数</h2><p>get请求 </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">http://你的域名(或者公网ip:8080)/Service/updateStep?phone=18888888888&amp;password=CZ123456&amp;steps=9990&amp;flag=0<br></code></pre></td></tr></table></figure><p>响应 </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;code&quot;</span>: <span class="hljs-number">200</span>,<br>    <span class="hljs-attr">&quot;msg&quot;</span>: <span class="hljs-string">&quot;成功&quot;</span>,<br>    <span class="hljs-attr">&quot;data&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;pedometerRecordHourlyList&quot;</span>: [&#123;<br>            <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-string">&quot;08be23751dc24a4bbca0638ad8880973&quot;</span>,<br>            <span class="hljs-attr">&quot;userId&quot;</span>: <span class="hljs-number">26993431</span>,<br>            <span class="hljs-attr">&quot;deviceId&quot;</span>: <span class="hljs-string">&quot;M_NULL&quot;</span>,<br>            <span class="hljs-attr">&quot;measurementTime&quot;</span>: <span class="hljs-string">&quot;2020-08-22 00:00:00&quot;</span>,<br>            <span class="hljs-attr">&quot;step&quot;</span>: <span class="hljs-string">&quot;9950,9950,0,0,0,0,0,0,0,0,0,0,4550,5650,0,0,9990,0,0,0,0,0,0,0&quot;</span>,<br>            <span class="hljs-attr">&quot;calories&quot;</span>: <span class="hljs-string">&quot;2487.00,2487.00,0,0,0,0,0,0,0,0,0,0,1137.00,1412.00,0,0,2497.00,0,0,0,0,0,0,0&quot;</span>,<br>            <span class="hljs-attr">&quot;distance&quot;</span>: <span class="hljs-string">&quot;3316.00,3316.00,0,0,0,0,0,0,0,0,0,0,1516.00,1883.00,0,0,3330.00,0,0,0,0,0,0,0&quot;</span>,<br>            <span class="hljs-attr">&quot;dataSource&quot;</span>: <span class="hljs-number">2</span>,<br>            <span class="hljs-attr">&quot;created&quot;</span>: <span class="hljs-string">&quot;2020-08-22 00:17:42&quot;</span>,<br>            <span class="hljs-attr">&quot;active&quot;</span>: <span class="hljs-number">0</span>,<br>            <span class="hljs-attr">&quot;updated&quot;</span>: <span class="hljs-number">1598084752590</span><br>        &#125;]<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="提交自动刷步"><a href="#提交自动刷步" class="headerlink" title="提交自动刷步"></a>提交自动刷步</h2><p>get请求</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">http://你的域名(或者公网ip:8080)/Service/updateStep?phone=18888888888&amp;password=CZ123456&amp;steps=9990&amp;flag=1<br></code></pre></td></tr></table></figure><p>响应</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;code&quot;</span>: <span class="hljs-number">508</span>,<br>    <span class="hljs-attr">&quot;msg&quot;</span>: <span class="hljs-string">&quot;已加入数据库进行定时任务&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><hr><p>响应码</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;code&quot;</span>: <span class="hljs-number">200</span>,<br>    <span class="hljs-attr">&quot;msg&quot;</span>: <span class="hljs-string">&quot;成功&quot;</span>,<br>    <span class="hljs-attr">&quot;data&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;pedometerRecordHourlyList&quot;</span>: [&#123;<br>            <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-string">&quot;08be23751dc24a4bbca0638ad8880973&quot;</span>,<br>            <span class="hljs-attr">&quot;userId&quot;</span>: <span class="hljs-number">26993431</span>,<br>            <span class="hljs-attr">&quot;deviceId&quot;</span>: <span class="hljs-string">&quot;M_NULL&quot;</span>,<br>            <span class="hljs-attr">&quot;measurementTime&quot;</span>: <span class="hljs-string">&quot;2020-08-22 00:00:00&quot;</span>,<br>            <span class="hljs-attr">&quot;step&quot;</span>: <span class="hljs-string">&quot;9950,9950,0,0,0,0,0,0,0,0,0,0,4550,5650,0,0,9990,0,0,0,0,0,0,0&quot;</span>,<br>            <span class="hljs-attr">&quot;calories&quot;</span>: <span class="hljs-string">&quot;2487.00,2487.00,0,0,0,0,0,0,0,0,0,0,1137.00,1412.00,0,0,2497.00,0,0,0,0,0,0,0&quot;</span>,<br>            <span class="hljs-attr">&quot;distance&quot;</span>: <span class="hljs-string">&quot;3316.00,3316.00,0,0,0,0,0,0,0,0,0,0,1516.00,1883.00,0,0,3330.00,0,0,0,0,0,0,0&quot;</span>,<br>            <span class="hljs-attr">&quot;dataSource&quot;</span>: <span class="hljs-number">2</span>,<br>            <span class="hljs-attr">&quot;created&quot;</span>: <span class="hljs-string">&quot;2020-08-22 00:17:42&quot;</span>,<br>            <span class="hljs-attr">&quot;active&quot;</span>: <span class="hljs-number">0</span>,<br>            <span class="hljs-attr">&quot;updated&quot;</span>: <span class="hljs-number">1598084752590</span><br>        &#125;]<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;code&quot;</span>: <span class="hljs-number">508</span>,<br>    <span class="hljs-attr">&quot;msg&quot;</span>: <span class="hljs-string">&quot;已加入数据库进行定时任务&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;code&quot;</span>: <span class="hljs-number">407</span>,<br>    <span class="hljs-attr">&quot;msg&quot;</span>: <span class="hljs-string">&quot;密码错误&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;code&quot;</span>: <span class="hljs-number">510</span>,<br>    <span class="hljs-attr">&quot;msg&quot;</span>: <span class="hljs-string">&quot;手机号长度错误&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p>下载地址</p><p><a href="https://chengzzz.lanzous.com/b0cqh4p2h">https://chengzzz.lanzous.com/b0cqh4p2h</a><br>密码:d7ty</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Idea连接数据库问题汇总</title>
      <link href="/2020/08/21/Idea%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
      <url>/2020/08/21/Idea%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="时区问题"><a href="#时区问题" class="headerlink" title="时区问题"></a>时区问题</h1><h2 id="Server-returns-invalid-timezone-Go-to-‘Advanced’-tab-and-set-‘serverTimezone’-property-manually"><a href="#Server-returns-invalid-timezone-Go-to-‘Advanced’-tab-and-set-‘serverTimezone’-property-manually" class="headerlink" title="Server returns invalid timezone. Go to ‘Advanced’ tab and set ‘serverTimezone’ property manually."></a>Server returns invalid timezone. Go to ‘Advanced’ tab and set ‘serverTimezone’ property manually.</h2><p>前进的道路充满荆棘。</p><h1 id="错误界面"><a href="#错误界面" class="headerlink" title="错误界面"></a>错误界面</h1><p>IDEA连接mysql，地址，用户名，密码，数据库名，全都配置好了，点测试连接，咔！不成功！</p><p>界面是这样的，</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191009101648442.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpdXFpa2Vy,size_16,color_FFFFFF,t_70" alt="img"></p><p>翻译过来就是：服务器返回无效时区。进入“高级”选项卡，手动设置“serverTimezone”属性。</p><p>看起来是时区出了问题。时区怎么会出问题？坑真多。网上搜了各种解决办法，琳琅满目，复杂的简单的，总算是解决了！</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>我的问题出在两块，第一，设置mysql的时区。第二，mysql驱动的版本。详细步骤如下：</p><h2 id="第一，设置mysql时区。"><a href="#第一，设置mysql时区。" class="headerlink" title="第一，设置mysql时区。"></a>第一，设置mysql时区。</h2><p>1，我们先来检查下mysql时区。</p><p>( 这里有个小插曲<del>~</del>你的mysql，配置好环境变量了吗 ）</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191009105144295.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpdXFpa2Vy,size_16,color_FFFFFF,t_70" alt="img"></p><p>配置完环境变量，就可以在命令窗口直接执行下面的命令啦！</p><p>进入命令窗口（Win + R），连接数据库 mysql -hlocalhost -uroot -p，回车，输入密码，回车，如图：</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191009102949109.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpdXFpa2Vy,size_16,color_FFFFFF,t_70" alt="img"></p><p>2，继续输入 show variables like’%time_zone’;  （注意不要漏掉后面的分号），回车，如图：</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191009103216457.png" alt="img"></p><p>显示 SYSTEM 就是没有设置时区啦。</p><p>3，现在我们来设置时区。</p><p>输入set global time_zone = ‘+8:00’; 注意不要漏掉后面的分号），回车，如图：</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191009103329355.png" alt="img"></p><p>这便是设置成功啦！</p><p>这时你重新连接下数据库，也许能连接成功！如果没有，就继续往下走！</p><h2 id="第二，同步mysql驱动。"><a href="#第二，同步mysql驱动。" class="headerlink" title="第二，同步mysql驱动。"></a>第二，同步mysql驱动。</h2><p>我本机安装的mysql版本是5.7的，那么IDEA要连接mysql也应该匹配下驱动版本。把Driver改成MySQL for 5.1就可以了</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191009103958463.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpdXFpa2Vy,size_16,color_FFFFFF,t_70" alt="img"></p><p>在点击Test Connection测试下，成功啦！</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191009104510966.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpdXFpa2Vy,size_16,color_FFFFFF,t_70" alt="img"></p><p>【补充】</p><p>如果，你选的是MySQL，<img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191009105524536.png" alt="img"></p><p>数据库又是其他版本的，也没关系。</p><p>在驱动列表里找到 MySQL ，右边Driver files 里，选择一下你需要的版本，保存就可以了。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191009104656408.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpdXFpa2Vy,size_16,color_FFFFFF,t_70" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Question </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis-plus+druid</title>
      <link href="/2020/08/21/MyBatis-plus/"/>
      <url>/2020/08/21/MyBatis-plus/</url>
      
        <content type="html"><![CDATA[<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>application.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><br><span class="hljs-comment">#服务器端口</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br>  <span class="hljs-attr">tomcat:</span><br>    <span class="hljs-attr">connection-timeout:</span> <span class="hljs-number">10000</span><br><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/mysteps?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=UTC</span><br>    <span class="hljs-attr">druid:</span><br>      <span class="hljs-attr">min-idle:</span> <span class="hljs-number">10</span><br>      <span class="hljs-attr">max-active:</span> <span class="hljs-number">50</span><br>      <span class="hljs-attr">max-idle:</span> <span class="hljs-number">10</span><br>      <span class="hljs-attr">initial-size:</span> <span class="hljs-number">1</span><br>      <span class="hljs-attr">max-wait:</span> <span class="hljs-number">5000</span><br><br></code></pre></td></tr></table></figure><h1 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h1><p>pom</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml">        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>   <br><br><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.23<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> plugin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Navicat Premium 15破解</title>
      <link href="/2020/08/21/Navicat%20Premium%2015/"/>
      <url>/2020/08/21/Navicat%20Premium%2015/</url>
      
        <content type="html"><![CDATA[<h1 id="Navicat-15-for-MySQL、Navicat-Premium-15和Navicat-12-for-MySQL破解版激活详细教程（注册机无需断网-亲测有效）"><a href="#Navicat-15-for-MySQL、Navicat-Premium-15和Navicat-12-for-MySQL破解版激活详细教程（注册机无需断网-亲测有效）" class="headerlink" title="Navicat 15 for MySQL、Navicat Premium 15和Navicat 12 for MySQL破解版激活详细教程（注册机无需断网 亲测有效）"></a><a href="https://www.cnblogs.com/FRIM/p/12955643.html">Navicat 15 for MySQL、Navicat Premium 15和Navicat 12 for MySQL破解版激活详细教程（注册机无需断网 亲测有效）</a></h1><p>目录</p><ul><li>1.下载地址；</li><li>2.Navicat 15 for MySQL安装；</li><li>3.Navicat 15 for MySQL破解激活；</li></ul><h1 id="一、下载地址"><a href="#一、下载地址" class="headerlink" title="一、下载地址"></a>一、下载地址</h1><p>　　<strong>Navicat官网 ：</strong><a href="http://www.navicat.com.cn/products">传送门</a> （由于官网软件更新无法保证一定能破解，可以去下载下面的安装包）</p><p>​      </p><p>​        蓝奏云下载</p><p>​        <a href="https://chengzzz.lanzous.com/iV2MTfxbvpa">https://chengzzz.lanzous.com/iV2MTfxbvpa</a></p><p>　　Navicat 15 for MySQL（附带Navicat 12 for MySQL安装包和注册机，三款软件破解方法一致，Navicat 15 for MySQL和</p><p>　　Navicat Premium 15都是5.5的注册机，Navicat 12 for MySQL是4.8的注册机且只能三选一，更换时需要删除注册表）:</p><p>　　链接：<a href="https://pan.baidu.com/s/1MKWxvt44iA0X5v9oqJ0qiQ">https://pan.baidu.com/s/1MKWxvt44iA0X5v9oqJ0qiQ</a><br>　　提取码：izhy</p><p>　  Navicat Premium 15（安装包和注册机） :</p><p>　　链接：<a href="https://pan.baidu.com/s/1Q6osjOEYPmFkAmR5WOVB3A">https://pan.baidu.com/s/1Q6osjOEYPmFkAmR5WOVB3A</a><br>　　提取码：wryh</p><p>　　MySQL5.7.16.0（有需要的可以这边下载MySQL数据库5.7版本的，这边就不附带安装教程了）:</p><p>　　链接：<a href="https://pan.baidu.com/s/1xADigqklyNSjuYsvrGetUw">https://pan.baidu.com/s/1xADigqklyNSjuYsvrGetUw</a><br>　　提取码：cmov</p><h1 id="二、Navicat-15-for-MySQL安装"><a href="#二、Navicat-15-for-MySQL安装" class="headerlink" title="二、Navicat 15 for MySQL安装"></a>二、Navicat 15 for MySQL安装</h1><p>1.如若是从Navicat 12 for MySQL更新到Navicat 15 for MySQL，先删除Navicat 12 for MySQL然后清除一下注册表 HKEY_CURRENT_USER\Software\PremiumSoft\Navicat（win+r打开运行输入regedit打开注册表）；</p><p>1.1.下载安装Navicat 15 for MySQL，双击打开安装程序（注意下载时关闭电脑管家和其他杀毒软件，或将<strong>Navicat_Keygen_Patch_V5.5_By_DFoX.exe</strong>加入信任区）；</p><p><img src= "/img/loading.gif" data-lazy-src="https://testchengzzz.oss-cn-shanghai.aliyuncs.com/img/20200822171134.png"></p><p>2.下一步继续安装；</p><p><img src= "/img/loading.gif" data-lazy-src="https://testchengzzz.oss-cn-shanghai.aliyuncs.com/img/20200822171158.png"></p><p>3.同意条款；</p><p><img src= "/img/loading.gif" data-lazy-src="https://testchengzzz.oss-cn-shanghai.aliyuncs.com/img/20200822171213.png"></p><p>4.选择安装目录，创建快捷方式并安装；</p><p><img src= "/img/loading.gif" data-lazy-src="https://testchengzzz.oss-cn-shanghai.aliyuncs.com/img/20200822171224.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://testchengzzz.oss-cn-shanghai.aliyuncs.com/img/20200822171237.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://testchengzzz.oss-cn-shanghai.aliyuncs.com/img/20200822171246.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://testchengzzz.oss-cn-shanghai.aliyuncs.com/img/20200822171255.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://testchengzzz.oss-cn-shanghai.aliyuncs.com/img/20200822171305.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://testchengzzz.oss-cn-shanghai.aliyuncs.com/img/20200822171315.png"></p><p>这样我们Navicat 15 for MySQL就安装成功了。</p><h1 id="三、Navicat-15-for-MySQL破解激活"><a href="#三、Navicat-15-for-MySQL破解激活" class="headerlink" title="三、Navicat 15 for MySQL破解激活"></a>三、Navicat 15 for MySQL破解激活</h1><p>1.双击打开注册机；</p><p><img src= "/img/loading.gif" data-lazy-src="https://testchengzzz.oss-cn-shanghai.aliyuncs.com/img/20200822171326.png"></p><p>\2. 如下图所示，选择“Navicat v15”，（可选项 ：Products选择“MySQL”），Languages选择“Simplified Chinese”，然后点击“Patch”，进行注册；</p><p><img src= "/img/loading.gif" data-lazy-src="https://testchengzzz.oss-cn-shanghai.aliyuncs.com/img/20200822171339.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://testchengzzz.oss-cn-shanghai.aliyuncs.com/img/20200822171351.png"></p><p>3.找到安装文件夹并选择navicat.exe打开；</p><p><img src= "/img/loading.gif" data-lazy-src="https://testchengzzz.oss-cn-shanghai.aliyuncs.com/img/20200822171401.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://testchengzzz.oss-cn-shanghai.aliyuncs.com/img/20200822171412.png"></p><p>4.打开双击打开Navicat 15 for MySQL，选择注册（如果第一次安装的话，打开软件就会提示注册，如果之前遗留有注册信息，可以通过点击帮助 》注册）；</p><p><img src= "/img/loading.gif" data-lazy-src="https://testchengzzz.oss-cn-shanghai.aliyuncs.com/img/20200822171423.png"></p><p>5.返回注册机点击Generate生成许可证秘钥，如下图所示：</p><p><img src= "/img/loading.gif" data-lazy-src="https://testchengzzz.oss-cn-shanghai.aliyuncs.com/img/20200822171437.png"></p><p>6.将生成许可证秘钥复制到Navicat 15 for MySQL上并显示✔才为正确，显示✘可继续点击Generate更换许可证秘钥；</p><p><img src= "/img/loading.gif" data-lazy-src="https://testchengzzz.oss-cn-shanghai.aliyuncs.com/img/20200822171448.png"></p><p>7选择手动激活；</p><p><img src= "/img/loading.gif" data-lazy-src="https://testchengzzz.oss-cn-shanghai.aliyuncs.com/img/20200822171502.png"></p><p>7.将请求码复制到注册机上的Request Code输入框中；然后点击“Generate”，生成激活码（此处自动将生成的激活复制到Navicat 15 for MySQL上）；</p><p><img src= "/img/loading.gif" data-lazy-src="https://testchengzzz.oss-cn-shanghai.aliyuncs.com/img/20200822171518.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://testchengzzz.oss-cn-shanghai.aliyuncs.com/img/20200822171536.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://testchengzzz.oss-cn-shanghai.aliyuncs.com/img/20200822171547.png"></p><p>8.点击激活；</p><p><img src= "/img/loading.gif" data-lazy-src="https://testchengzzz.oss-cn-shanghai.aliyuncs.com/img/20200822171603.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://testchengzzz.oss-cn-shanghai.aliyuncs.com/img/20200822171613.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://testchengzzz.oss-cn-shanghai.aliyuncs.com/img/20200822171623.png"></p><p>转载至<a href="https://www.cnblogs.com/FRIM/p/12955643.html">https://www.cnblogs.com/FRIM/p/12955643.html</a></p>]]></content>
      
      
      <categories>
          
          <category> DataBase </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android</title>
      <link href="/2020/08/19/Activity%E5%88%9D%E6%8E%A2/"/>
      <url>/2020/08/19/Activity%E5%88%9D%E6%8E%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="Activity"><a href="#Activity" class="headerlink" title="Activity"></a>Activity</h1><h2 id="返回栈"><a href="#返回栈" class="headerlink" title="返回栈"></a>返回栈</h2><p> Android其实是通过任务(task)来管理Activity的，每一个task都是一组存放在栈中的Activity集合，这个栈也称为返回栈(back stack),栈是一种后进先出的数据结构。在默认情况下，我们启动了一个新的Activity，他就会在返回栈中入栈，并处于栈顶的位置。每当我们启动新的Activity时，都会在返回栈中入栈，且位于栈顶。而当我们back或者finish销毁Activity时，处于当前返回栈栈顶的Activity将会出栈，前一个入栈的Activity将会处于栈顶的位置。系统总是会显示处于栈顶的Activity给用户。</p><hr><h2 id="Activity的状态"><a href="#Activity的状态" class="headerlink" title="Activity的状态"></a>Activity的状态</h2><ol><li><p>运行状态</p><p>当Activity处于栈顶，且为可见状态时，即为运行状态。系统不愿意回收可见状态的Activity，因为这会给用户带来极差的体验。</p></li><li><p>暂停状态</p><p>当Activity不处在栈顶，且不完全为可见状态时，即为暂停状态。<code>例如对话框形式的Activity即只占用了部分区域的Activity</code> 系统也不愿意回收这种Activity，只有在内存极低的情况下系统才会去考虑回收这种Activity</p></li><li><p>停止状态</p><p>当Activity不处于栈顶，且完全不可见时，即为停止状态，系统仍然会为这种Activity保存相应的状态和成员变量，但这并不是完全可靠的，当其他地方需要内存时，处于停止状态的Activity有可能被系统回收。</p></li><li><p>销毁状态</p><p>一个Activity从栈中移除后就变成了销毁状态。系统倾向于回收这种状态的Activity，以保存系统内存的充足。</p></li></ol><p>未完待续…</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring</title>
      <link href="/2020/08/18/Spring%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/08/18/Spring%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[    <div id="aplayer-QBFyaJxn" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="5186066572" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"    ></div><h1 id="爬坑Spring"><a href="#爬坑Spring" class="headerlink" title="爬坑Spring"></a>爬坑Spring</h1><p>[TOC]</p><h2 id="Spring简介"><a href="#Spring简介" class="headerlink" title="Spring简介"></a>Spring简介</h2><h3 id="1-1-官网"><a href="#1-1-官网" class="headerlink" title="1.1 官网"></a>1.1 官网</h3><p><a href="https://spring.io/">spring官网</a></p><p><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html">spring文档</a></p><p><a href="https://www.docs4dev.com/docs/zh/spring-framework/5.1.3.RELEASE/reference">spring中文文档</a></p><h3 id="1-2-理念"><a href="#1-2-理念" class="headerlink" title="1.2 理念"></a>1.2 理念</h3><p>使现有的技术更加容易使用，本身是一个大杂烩，整合了现有的技术框架</p><h3 id="1-3-优点"><a href="#1-3-优点" class="headerlink" title="1.3 优点"></a>1.3 优点</h3><ul><li><p>Spring是一个开源的免费的框架(容器)</p></li><li><p>Spring是一个轻量级的、非侵入式的框架</p></li><li><p>控制权反转 IOC，面向切面编程 AOP</p></li><li><p>支持事务的处理，对框架整合的支持</p></li></ul><h3 id="1-4-组成"><a href="#1-4-组成" class="headerlink" title="1.4 组成"></a>1.4 组成</h3><p><img src= "/img/loading.gif" data-lazy-src="https://testchengzzz.oss-cn-shanghai.aliyuncs.com/img/20200818151520.png"></p><h3 id="1-5-拓展"><a href="#1-5-拓展" class="headerlink" title="1.5 拓展"></a>1.5 拓展</h3><p><img src= "/img/loading.gif" data-lazy-src="https://testchengzzz.oss-cn-shanghai.aliyuncs.com/img/20200818151531.png"></p><ul><li><p>Spring boot</p><ul><li>一个快速开发的脚手架。</li><li>基于Spring Boot可以快速开发单个微服务。</li><li>约定大于配置。</li></ul></li><li><p>Spring Cloud</p><ul><li>基于Spring Boot实现的。</li></ul></li></ul><p>== 现在大部分公司都在使用Spring Boot进行快速开发，学习Spring Boot的前提，需要完全掌握Spring 及 SpringMVC == </p><p><strong>Spring弊端：发展太久后违背了最初理念，配置十分繁琐，直至Spring Boot的出现</strong></p><h2 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h2><h3 id="2-1-IOC的推导"><a href="#2-1-IOC的推导" class="headerlink" title="2.1 IOC的推导"></a>2.1 IOC的推导</h3><h4 id="2-1-1-初识控制权反转"><a href="#2-1-1-初识控制权反转" class="headerlink" title="2.1.1 初识控制权反转"></a>2.1.1 初识控制权反转</h4><ol><li>UserDao 接口</li><li>UserDaoImpl 接口实现类</li><li>UserService 业务接口</li><li>UserServiceImpl 业务实现类</li></ol><h5 id="IOC原型之静态生成对象–控制权掌握在程序员手中"><a href="#IOC原型之静态生成对象–控制权掌握在程序员手中" class="headerlink" title="IOC原型之静态生成对象–控制权掌握在程序员手中"></a>IOC原型之静态生成对象–控制权掌握在程序员手中</h5><pre class="language-java" data-language="java"><code class="language-java">public class UserServiceImpl implements UserService&#123;    private UserDao userDao &#x3D;new UserDaoMysqlImpl();    public void getUser() &#123;        userDao.getUser();    &#125;&#125;</code></pre><pre class="language-java" data-language="java"><code class="language-java">public class MyTest &#123;    public static void main(String[] args) &#123;        &#x2F;&#x2F;用户调用业务层，dao无需接触        UserServiceImpl userService &#x3D; new UserServiceImpl();        userService.getUser();    &#125;&#125;</code></pre><p>通过new的方式，在service层静态的，固定的给出了业务实现，用户无法进行控制。</p><hr><h5 id="IOC原型之动态生成对象–控制权掌握在用户手中"><a href="#IOC原型之动态生成对象–控制权掌握在用户手中" class="headerlink" title="IOC原型之动态生成对象–控制权掌握在用户手中"></a>IOC原型之动态生成对象–控制权掌握在用户手中</h5><pre class="language-java" data-language="java"><code class="language-java">public class UserServiceImpl implements UserService&#123;    private UserDao userDao;    &#x2F;&#x2F;使用set进行注入    public void setUserDao(UserDao userDao) &#123;        this.userDao &#x3D; userDao;    &#125;    public void getUser() &#123;        userDao.getUser();    &#125;&#125;</code></pre><p>通过set方法注入，使得service层动态加载业务，具体业务的种类的选择权转移到了用户手中。</p><pre class="language-java" data-language="java"><code class="language-java">public class MyTest &#123;    public static void main(String[] args) &#123;        &#x2F;&#x2F;用户调用业务层，dao无需接触        UserServiceImpl userService &#x3D; new UserServiceImpl();        userService.setUserDao(new UserDaoMysqlImpl());        userService.getUser();    &#125;&#125;</code></pre><ul><li><p>之前，程序是主动创建对象，控制权在程序员手中。</p></li><li><p>使用set注入之后，程序不再具有主动性，控制权转移到了用户手中。</p><h5 id="IOC本质"><a href="#IOC本质" class="headerlink" title="IOC本质"></a>IOC本质</h5></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://testchengzzz.oss-cn-shanghai.aliyuncs.com/img/20200818151544.png"></p><ul><li>过去，如图1，我们希望在四个模块中间有一个中间件进行联系，那么我们只需要调用中间件即可访问其他模块</li><li>于是乎IOC容器诞生了，由IOC容器连接模块，模块间不再具有强耦合性，用户决定调用的方向。</li></ul><p><code>总结：控制权反转(IOC)，是一种使得程序从主动改变转换为被动接收，将控制权由开发人员手中转移到用户手中的设计思想而非具体实现方法，DI(依赖注入)是实现IOC的一种方法</code></p><p><code>控制权反转是一种通过描述(XML或注解)并通过第三方去生产或获取特定对象的方式。在Spring中实现控制权反转的是IOC容器，其实现的方法为依赖注入(Dependency Injection,DI)</code></p><hr><h4 id="2-1-2-第一个Spring程序"><a href="#2-1-2-第一个Spring程序" class="headerlink" title="2.1.2  第一个Spring程序"></a>2.1.2  第一个Spring程序</h4><h5 id="配置文件的编写"><a href="#配置文件的编写" class="headerlink" title="配置文件的编写"></a>配置文件的编写</h5><h6 id="使用XML"><a href="#使用XML" class="headerlink" title="使用XML"></a>使用XML</h6><pre class="language-xml" data-language="xml"><code class="language-xml">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd&quot;&gt;    &lt;bean id&#x3D;&quot;Mysql&quot; class&#x3D;&quot;com.chengzzz.dao.UserDaoMysqlImpl&quot;&#x2F;&gt;    &lt;bean id&#x3D;&quot;oracle&quot; class&#x3D;&quot;com.chengzzz.dao.UserDaoOracleImpl&quot;&#x2F;&gt;    &lt;bean id&#x3D;&quot;user&quot; class&#x3D;&quot;com.chengzzz.dao.UserDaoImpl&quot;&#x2F;&gt;    &lt;bean id&#x3D;&quot;userservices&quot; class&#x3D;&quot;com.chengzzz.service.UserServiceImpl&quot;&gt;        &lt;!--        ref:引用容器中创建好的对象         value:具体的值        --&gt;        &lt;property name&#x3D;&quot;userDao&quot; ref&#x3D;&quot;user&quot;&gt;&lt;&#x2F;property&gt;    &lt;&#x2F;bean&gt;&lt;&#x2F;beans&gt;</code></pre><p><code>以上Bean类通过在XML中声明后，即可通过ApplicationContext ApplicationContext = new ClassPathXmlApplicationContext(&quot;beans.xml&quot;)读取到配置文件，从而使得IOC容器实现控制权反转</code></p><pre class="language-java" data-language="java"><code class="language-java">public class MyTest &#123;    public static void main(String[] args) &#123;        ApplicationContext ApplicationContext &#x3D; new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);        UserService userservices &#x3D; ApplicationContext.getBean(&quot;userservices&quot;,UserServiceImpl.class);        userservices.getUser();    &#125;&#125;</code></pre><p><code>以上即为Spring通过xml 实现控制权反转后产生的实体类对象，通过getBean方法获取并得以使用</code></p><h6 id="使用注解"><a href="#使用注解" class="headerlink" title="使用注解"></a>使用注解</h6><h6 id="使用纯java代码"><a href="#使用纯java代码" class="headerlink" title="使用纯java代码"></a>使用纯java代码</h6><h5 id="IOC对象的创建"><a href="#IOC对象的创建" class="headerlink" title="IOC对象的创建"></a>IOC对象的创建</h5><h6 id="IOC创建对象的方式"><a href="#IOC创建对象的方式" class="headerlink" title="IOC创建对象的方式"></a>IOC创建对象的方式</h6><ol><li><p>无参构造器创建对象，默认方法</p><pre class="language-java" data-language="java"><code class="language-java">&lt;bean id&#x3D;&quot;hello&quot; class&#x3D;&quot;com.chengzzz.pojo.Hello&quot;&gt;&lt;property name&#x3D;&quot;name&quot; value&#x3D;&quot;小橙子&quot;&gt;&lt;&#x2F;property&gt;&lt;&#x2F;bean&gt;</code></pre></li></ol><ol start="2"><li><p>有参构造创建对象</p><p>下标注入</p><pre class="language-java" data-language="java"><code class="language-java">&lt;bean id&#x3D;&quot;hello&quot; class&#x3D;&quot;com.chengzzz.pojo.Hello&quot;&gt; &lt;constructor-arg index&#x3D;&quot;0&quot; value&#x3D;&quot;小橙子&quot;&gt;&lt;&#x2F;constructor-arg&gt;&lt;&#x2F;bean&gt;</code></pre></li></ol><p>   类型注入</p>   <pre class="language-java" data-language="java"><code class="language-java">&lt;bean id&#x3D;&quot;hello&quot; class&#x3D;&quot;com.chengzzz.pojo.Hello&quot;&gt;    &lt;constructor-arg type&#x3D;&quot;java.lang.String&quot; value&#x3D;&quot;小橙子&quot;&gt;&lt;&#x2F;constructor-arg&gt;&lt;&#x2F;bean&gt;</code></pre><p>   参数名注入</p>   <pre class="language-java" data-language="java"><code class="language-java">&lt;bean id&#x3D;&quot;hello&quot; class&#x3D;&quot;com.chengzzz.pojo.Hello&quot;&gt;    &lt;constructor-arg name&#x3D;&quot;name&quot; value&#x3D;&quot;小橙子&quot;&gt;&lt;&#x2F;constructor-arg&gt;&lt;&#x2F;bean&gt;</code></pre><hr><h2 id="Spring配置"><a href="#Spring配置" class="headerlink" title="Spring配置"></a>Spring配置</h2><h3 id="3-1-alisas-别名"><a href="#3-1-alisas-别名" class="headerlink" title="3.1 alisas(别名)"></a>3.1 alisas(别名)</h3><pre class="language-java" data-language="java"><code class="language-java">&lt;alias name&#x3D;&quot;hello&quot; alias&#x3D;&quot;hello2&quot;&gt;&lt;&#x2F;alias&gt;</code></pre><p>没什么卵用</p><pre class="language-java" data-language="java"><code class="language-java">&lt;bean id&#x3D;&quot;hello&quot; class&#x3D;&quot;com.chengzzz.pojo.Hello&quot; name&#x3D;&quot;hello2,hello1&quot;&gt;    &lt;constructor-arg name&#x3D;&quot;name&quot; value&#x3D;&quot;小橙子&quot;&gt;&lt;&#x2F;constructor-arg&gt;&lt;&#x2F;bean&gt;</code></pre><p>在bean的注册中可以使用name来写入别名</p><hr><h3 id="3-2-Import"><a href="#3-2-Import" class="headerlink" title="3.2 Import"></a>3.2 Import</h3><p>导入配置文件，团队开发中，含有多个配置文件时可以使用import将所有的配置文件合并为一个。</p><pre class="language-java" data-language="java"><code class="language-java">&lt;import resource&#x3D;&quot;beans1.xml&quot;&gt;&lt;&#x2F;import&gt;&lt;import resource&#x3D;&quot;beans2.xml&quot;&gt;&lt;&#x2F;import&gt;&lt;import resource&#x3D;&quot;beans3.xml&quot;&gt;&lt;&#x2F;import&gt;</code></pre><p><code>注意重名时，后导入的会覆盖前导入的</code></p><hr><h2 id="DI-依赖注入"><a href="#DI-依赖注入" class="headerlink" title="DI(依赖注入)"></a>DI(依赖注入)</h2><h3 id="4-1-构造器注入"><a href="#4-1-构造器注入" class="headerlink" title="4.1 构造器注入"></a>4.1 构造器注入</h3><p>参考上文  <strong>IOC创建对象的方式</strong></p><hr><h3 id="4-2-Set方法注入"><a href="#4-2-Set方法注入" class="headerlink" title="4.2 Set方法注入"></a><strong>4.2 Set方法注入</strong></h3><p><strong>Set方法注入【重点</strong>】</p><ul><li>Set注入是依赖注入的本质，依赖注入的本质是Set注入<ul><li>依赖：bean对象的创建依赖于容器</li><li>注入：bean对象中的所有属性，都由容器来注入</li></ul></li></ul><p>测试环境</p><p>Student类</p><pre class="language-java" data-language="java"><code class="language-java">public class Student &#123;    private String name;    private Address address;    private String[] books;    private List&lt;String&gt; hobbys;    private Map&lt;String,String&gt; card;    private Set&lt;String&gt; games;    private String wife;    private Properties info;    &#x2F;*get set tosting方法省略*&#x2F;&#125;</code></pre><p>Address类</p><pre class="language-java" data-language="java"><code class="language-java">public class Address &#123;    private String address;&#x2F;*get set tosting方法省略*&#x2F;&#125;</code></pre><p>beans.xml</p><pre class="language-xml" data-language="xml"><code class="language-xml">&lt;bean id&#x3D;&quot;student&quot; class&#x3D;&quot;com.chengzzz.pojo.Student&quot;&gt;       &lt;!--普通值注入--&gt;       &lt;property name&#x3D;&quot;name&quot; value&#x3D;&quot;小橙子&quot;&gt;&lt;&#x2F;property&gt;   &lt;&#x2F;bean&gt;   &lt;bean id&#x3D;&quot;address&quot; class&#x3D;&quot;com.chengzzz.pojo.Address&quot;&gt;&lt;&#x2F;bean&gt;</code></pre><p>完整注入xml</p><pre class="language-xml" data-language="xml"><code class="language-xml">&lt;bean id&#x3D;&quot;student&quot; class&#x3D;&quot;com.chengzzz.pojo.Student&quot;&gt;    &lt;!--1.普通值注入 value--&gt;    &lt;property name&#x3D;&quot;name&quot; value&#x3D;&quot;小橙子&quot;&gt;&lt;&#x2F;property&gt;    &lt;!--2.bean注入 ref--&gt;    &lt;property name&#x3D;&quot;address&quot; ref&#x3D;&quot;address&quot;&gt;&lt;&#x2F;property&gt;    &lt;!--3.数组注入 ref--&gt;    &lt;property name&#x3D;&quot;books&quot;&gt;        &lt;array&gt;            &lt;value&gt;红楼梦&lt;&#x2F;value&gt;            &lt;value&gt;西游记&lt;&#x2F;value&gt;            &lt;value&gt;三国演义&lt;&#x2F;value&gt;            &lt;value&gt;水浒传&lt;&#x2F;value&gt;        &lt;&#x2F;array&gt;    &lt;&#x2F;property&gt;    &lt;!--4.list注入--&gt;    &lt;property name&#x3D;&quot;hobbys&quot;&gt;        &lt;list&gt;            &lt;value&gt;打游戏&lt;&#x2F;value&gt;            &lt;value&gt;听歌&lt;&#x2F;value&gt;            &lt;value&gt;睡觉&lt;&#x2F;value&gt;        &lt;&#x2F;list&gt;    &lt;&#x2F;property&gt;    &lt;!--5.map注入--&gt;    &lt;property name&#x3D;&quot;card&quot;&gt;        &lt;map&gt;            &lt;entry key&#x3D;&quot;身份证&quot; value&#x3D;&quot;111&quot;&gt;&lt;&#x2F;entry&gt;            &lt;entry key&#x3D;&quot;银行卡&quot; value&#x3D;&quot;222&quot;&gt;&lt;&#x2F;entry&gt;            &lt;entry key&#x3D;&quot;校园卡&quot; value&#x3D;&quot;333&quot;&gt;&lt;&#x2F;entry&gt;        &lt;&#x2F;map&gt;    &lt;&#x2F;property&gt;    &lt;!--6.set注入--&gt;    &lt;property name&#x3D;&quot;games&quot;&gt;        &lt;set&gt;            &lt;value&gt;lol&lt;&#x2F;value&gt;            &lt;value&gt;wow&lt;&#x2F;value&gt;        &lt;&#x2F;set&gt;    &lt;&#x2F;property&gt;    &lt;!--7.null注入--&gt;    &lt;property name&#x3D;&quot;wife&quot;&gt;        &lt;null&gt;&lt;&#x2F;null&gt;    &lt;!--8.Properties注入--&gt;    &lt;&#x2F;property&gt;    &lt;property name&#x3D;&quot;info&quot;&gt;        &lt;props&gt;            &lt;prop key&#x3D;&quot;drive&quot;&gt;12333&lt;&#x2F;prop&gt;            &lt;prop key&#x3D;&quot;sex&quot;&gt;女&lt;&#x2F;prop&gt;        &lt;&#x2F;props&gt;    &lt;&#x2F;property&gt;&lt;&#x2F;bean&gt;&lt;bean id&#x3D;&quot;address&quot; class&#x3D;&quot;com.chengzzz.pojo.Address&quot;&gt;&lt;&#x2F;bean&gt;</code></pre><h3 id="4-3-拓展方式注入"><a href="#4-3-拓展方式注入" class="headerlink" title="4.3 拓展方式注入"></a>4.3 拓展方式注入</h3><ul><li><p>P命名空间注入(p=property即属性注入)</p><pre class="language-xml" data-language="xml"><code class="language-xml">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;     xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;      xmlns:p&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;p&quot;     xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd&quot;&gt;  &lt;!--p命名空间注入--&gt;  &lt;bean id&#x3D;&quot;user&quot; class&#x3D;&quot;com.chengzzz.pojo.User&quot; p:name&#x3D;&quot;小橙子&quot; p:age&#x3D;&quot;18&quot;&#x2F;&gt;  &lt;&#x2F;beans&gt;</code></pre></li></ul><ul><li><p>C命名空间注入(c=constructor-arg即构造器注入)</p><pre class="language-xml" data-language="xml"><code class="language-xml">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;     xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;        xmlns:c&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;c&quot;     xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd&quot;&gt;  &lt;!--c命名空间注入--&gt;  &lt;bean id&#x3D;&quot;user2&quot; class&#x3D;&quot;com.chengzzz.pojo.User&quot; c:name&#x3D;&quot;小橙子&quot; c:age&#x3D;&quot;19&quot;&#x2F;&gt;  &lt;&#x2F;beans&gt;</code></pre><p><code>注意 p命名空间注入为属性注入即set注入  而set注入必须有无参构造器  c命名空间为有参构造器注入 实体类需重写有参构造方法</code></p><p><code>c命名空间 p命名空间不能直接使用 需要导入依赖</code></p></li></ul><hr><h3 id="4-4-Bean的作用域"><a href="#4-4-Bean的作用域" class="headerlink" title="4.4 Bean的作用域"></a>4.4 Bean的作用域</h3><p><img src= "/img/loading.gif" data-lazy-src="https://testchengzzz.oss-cn-shanghai.aliyuncs.com/img/20200818151603.png"></p><ol><li><p>单例模式【Spring默认模式】</p><pre class="language-xml" data-language="xml"><code class="language-xml">&lt;bean id&#x3D;&quot;user2&quot; class&#x3D;&quot;com.chengzzz.pojo.User&quot; c:name&#x3D;&quot;小橙子&quot; c:age&#x3D;&quot;19&quot; scope&#x3D;&quot;singleton&quot;&#x2F;&gt;</code></pre></li></ol><ol start="2"><li><p>原型模式</p><pre class="language-xml" data-language="xml"><code class="language-xml">&lt;bean id&#x3D;&quot;user2&quot; class&#x3D;&quot;com.chengzzz.pojo.User&quot; c:name&#x3D;&quot;小橙子&quot; c:age&#x3D;&quot;19&quot; scope&#x3D;&quot;prototype&quot;&#x2F;&gt;</code></pre></li><li><p>其余的request、sesstion、application只在web开发中使用到</p></li></ol><hr><h2 id="Bean的自动装配"><a href="#Bean的自动装配" class="headerlink" title="Bean的自动装配"></a>Bean的自动装配</h2><ul><li>自动装配是Spring满足bean依赖的一种方式。</li><li>Spring会在上下文中自动寻找，并自动给bean装配属性</li></ul><p>Spring中装配方式有三种</p><ol><li>在xml中显式地配置</li><li>在java中显式地配置</li><li><strong>隐式的自动装配bean 【重要】</strong></li></ol><h3 id="5-1测试"><a href="#5-1测试" class="headerlink" title="5.1测试"></a>5.1测试</h3><p>测试类</p><pre class="language-java" data-language="java"><code class="language-java">public class Cat &#123;    public void shout()&#123;        System.out.println(&quot;喵喵喵&quot;);    &#125;&#125;</code></pre><pre class="language-java" data-language="java"><code class="language-java">public class Dog &#123;    public void shout()&#123;        System.out.println(&quot;汪汪汪&quot;);    &#125;&#125;</code></pre><pre class="language-java" data-language="java"><code class="language-java">public class People &#123;    private Cat cat;    private Dog dog;    private String name;    public Cat getCat() &#123;        return cat;    &#125;    public void setCat(Cat cat) &#123;        this.cat &#x3D; cat;    &#125;    public Dog getDog() &#123;        return dog;    &#125;    public void setDog(Dog dog) &#123;        this.dog &#x3D; dog;    &#125;    public String getName() &#123;        return name;    &#125;    public void setName(String name) &#123;        this.name &#x3D; name;    &#125;&#125;</code></pre><p>配置文件</p><pre class="language-xml" data-language="xml"><code class="language-xml">&lt;bean id&#x3D;&quot;cat&quot; class&#x3D;&quot;www.chengzzz.pojo.Cat&quot;&gt;&lt;&#x2F;bean&gt;&lt;bean id&#x3D;&quot;dog&quot; class&#x3D;&quot;www.chengzzz.pojo.Dog&quot;&gt;&lt;&#x2F;bean&gt;&lt;bean id&#x3D;&quot;people&quot; class&#x3D;&quot;www.chengzzz.pojo.People&quot;&gt;    &lt;property name&#x3D;&quot;name&quot; value&#x3D;&quot;xxx&quot;&gt;    &lt;&#x2F;property&gt;    &lt;property name&#x3D;&quot;cat&quot; ref&#x3D;&quot;cat&quot;&gt;    &lt;&#x2F;property&gt;    &lt;property name&#x3D;&quot;dog&quot; ref&#x3D;&quot;dog&quot;&gt;&lt;&#x2F;property&gt;&lt;&#x2F;bean&gt;</code></pre><hr><h3 id="5-2-自动装配的方式"><a href="#5-2-自动装配的方式" class="headerlink" title="5.2 自动装配的方式"></a>5.2 自动装配的方式</h3><ol><li><p>byName(在容器上下文中查找和自己对象set方法后面的值对应的beanid) 名字必须唯一</p><pre class="language-xml" data-language="xml"><code class="language-xml">&lt;bean id&#x3D;&quot;people&quot; class&#x3D;&quot;www.chengzzz.pojo.People&quot; autowire&#x3D;&quot;byName&quot;&gt; &lt;property name&#x3D;&quot;name&quot; value&#x3D;&quot;xxx&quot;&#x2F;&gt;&lt;&#x2F;bean&gt;</code></pre></li></ol><ol start="2"><li><p>byType(在容器上下文中查找和自己对象属性类型相同的bean) </p><pre class="language-xml" data-language="xml"><code class="language-xml">&lt;bean id&#x3D;&quot;people&quot; class&#x3D;&quot;www.chengzzz.pojo.People&quot; autowire&#x3D;&quot;byType&quot;&gt; &lt;property name&#x3D;&quot;name&quot; value&#x3D;&quot;xxx&quot;&gt; &lt;&#x2F;property&gt;&lt;&#x2F;bean&gt;</code></pre></li></ol><p>   <code>小节</code></p><ul><li>byname的时候。需要保证所有bean的id唯一，并且这个bean需要和自动注入的属性的set方法值一致。</li><li>bytype的时候。需要保证所有bean的class唯一，并且这个bean需要和自动注入的属性的类型一致</li></ul><hr><h3 id="5-3-使用注解实现自动装配"><a href="#5-3-使用注解实现自动装配" class="headerlink" title="5.3 使用注解实现自动装配"></a>5.3 使用注解实现自动装配</h3><p>JDK从1.5开始支持的注解，Spring从2.5就开始支持注解</p><p><code>使用注解注意点</code></p><ol><li><p>导入约束</p><p>&lt;!–hexoPostRenderEscape:<pre class="language-xml" data-language="xml"><code class="language-xml">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;<br>&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;<a href="http://www.springframework.org&/#x2F;schema&#x2F;beans">www.springframework.org&#x2F;schema&#x2F;beans</a>&quot;</p><pre><code>xmlns:xsi&amp;#x3D;&amp;quot;http:&amp;#x2F;&amp;#x2F;www.w3.org&amp;#x2F;2001&amp;#x2F;XMLSchema-instance&amp;quot;xmlns:context&amp;#x3D;&amp;quot;http:&amp;#x2F;&amp;#x2F;www.springframework.org&amp;#x2F;schema&amp;#x2F;context&amp;quot;xsi:schemaLocation&amp;#x3D;&amp;quot;http:&amp;#x2F;&amp;#x2F;www.springframework.org&amp;#x2F;schema&amp;#x2F;beans http:&amp;#x2F;&amp;#x2F;www.springframework.org&amp;#x2F;schema&amp;#x2F;beans&amp;#x2F;spring-beans.xsd http:&amp;#x2F;&amp;#x2F;www.springframework.org&amp;#x2F;schema&amp;#x2F;context http:&amp;#x2F;&amp;#x2F;www.springframework.org&amp;#x2F;schema&amp;#x2F;beans&amp;#x2F;spring-context.xsd&amp;quot;&amp;gt;</code></pre></li></ol><p>&lt;&#x2F;beans&gt;</code></pre>:hexoPostRenderEscape–&gt;</p><ol start="2"><li>开启注解支持</li></ol><pre class="language-xml" data-language="xml"><code class="language-xml">&lt;context:annotation-config&#x2F;&gt;</code></pre><p>在属性上直接使用也可以在set方法上使用，实体类可以没有set方法前提是符合byType</p><pre class="language-java" data-language="java"><code class="language-java">@Autowired@Qualifier(value &#x3D; &quot;cat&quot;)  &#x2F;&#x2F;此注解可指定自动装配name为cat的bean</code></pre><p><code>Tips</code></p><pre class="language-xml" data-language="xml"><code class="language-xml">@Nullable &#x2F;&#x2F;字段标记了这个注解 说明这个字段可以为null@Autowired(required&#x3D;false) &#x2F;&#x2F;表示这个对象可以为null@Resource &#x2F;&#x2F;jdk的注解，亦可指定@Resource(name&#x3D;&quot;cat&quot;)  此注解在jdk11中被移除</code></pre><p><code>@Resource和@Autowired的区别</code></p><ul><li>都是用来自动装配的，都可以放在属性字段上</li><li>@AutoWired默认通过byType实现，必须要求其存在，否则空指针</li><li>@Resource默认通过byName方式实现，如果找不到名字则通过byType实现，如果找不到则报错。</li></ul><hr><h2 id="使用注解开发"><a href="#使用注解开发" class="headerlink" title="使用注解开发"></a>使用注解开发</h2><p>在Spring4之后 要使用注解开发，必须导入aop的包</p><p>需要导入context的约束，开启注解支持</p><p><code>注解</code></p><pre class="language-xml" data-language="xml"><code class="language-xml">@Component &#x2F;&#x2F;声明此类为自动装配的组件，配合自动扫描包实现自动装配@Value(&quot;小橙子&quot;) &#x2F;&#x2F;赋值，相当于属性注入中的value@Repository &#x2F;&#x2F;Dao层的标注Component的衍生注解@Service  &#x2F;&#x2F;Service层的标注Component的衍生注解@Controller  &#x2F;&#x2F;Controller层的标注Component的衍生注解@AutoWired &#x2F;&#x2F;自动装配的注解@Scope  &#x2F;&#x2F;模式注解 @Configuration &#x2F;&#x2F;使用java代码实现xml配置@ComponentScan(&quot;com.chengzzz.pojo&quot;)&#x2F;&#x2F;扫描指定的包@Import(bean2.class) &#x2F;&#x2F;导入另外的配置文件@Aspect &#x2F;&#x2F;切面</code></pre><p><code>xml与注解</code></p><ol><li>xml更加万能，维护简单方便</li><li>注解不是自己的类使用不了，维护相对复杂</li></ol><p><code>xml与注解的最佳实现</code></p><ol><li>xml用来管理bean</li><li>注解只负责属性的注入</li><li>我们在使用的过程中只需要注意一个问题：必须让注解生效，就必须开启注解支持。</li></ol><h3 id="6-1-开启注解支持"><a href="#6-1-开启注解支持" class="headerlink" title="6.1 开启注解支持"></a>6.1 开启注解支持</h3><pre class="language-xml" data-language="xml"><code class="language-xml">&lt;!--开启注解支持--&gt; &lt;context:annotation-config&#x2F;&gt; &lt;!--指定需要扫描的包，这个包下的注解会生效--&gt; &lt;context:component-scan base-package&#x3D;&quot;com.chengzzz.pojo&quot;&#x2F;&gt;</code></pre><hr><h3 id="6-2-使用JavaConfig实现配置"><a href="#6-2-使用JavaConfig实现配置" class="headerlink" title="6.2 使用JavaConfig实现配置"></a>6.2 使用JavaConfig实现配置</h3><p>我们现在完全使用java来实现配置</p><p>JavaConfigs Spring的一个子项目，在Spring4之后，他成为了一个核心功能</p><pre class="language-java" data-language="java"><code class="language-java">@Configuration@ComponentScan(&quot;com.chengzzz.pojo&quot;)@Import(bean2.class)public class MyConfig &#123;    @Bean    public User getUser()&#123;        return new User();    &#125;&#125;</code></pre><p>这种纯Java的配置方式，在SpringBoot中随处可见</p><h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><p><img src= "/img/loading.gif" data-lazy-src="https://testchengzzz.oss-cn-shanghai.aliyuncs.com/img/20200818151618.png"></p><p>Spring Aop支持五种类型</p><p><img src= "/img/loading.gif" data-lazy-src="C:\Users\Yet\AppData\Roaming\Typora\typora-user-images\image-20200804132547513.png" alt="image-20200804132547513"></p><p><img src= "/img/loading.gif" data-lazy-src="https://testchengzzz.oss-cn-shanghai.aliyuncs.com/img/20200818151628.png"></p><p>需要导入依赖包</p><pre class="language-xml" data-language="xml"><code class="language-xml">&lt;dependencies&gt;    &lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.aspectj&#x2F;aspectjweaver --&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.aspectj&lt;&#x2F;groupId&gt;        &lt;artifactId&gt;aspectjweaver&lt;&#x2F;artifactId&gt;        &lt;version&gt;1.9.5&lt;&#x2F;version&gt;    &lt;&#x2F;dependency&gt;&lt;&#x2F;dependencies&gt;</code></pre><hr><h3 id="7-1-代理模式"><a href="#7-1-代理模式" class="headerlink" title="7.1 代理模式"></a>7.1 代理模式</h3><p>为什么要学习代理模式？</p><p>因为这就是SpringAop的底层【SpringAop和SpringMVC】</p><p>代理模式的分类：</p><ul><li>静态代理</li><li>动态代理</li></ul><hr><h4 id="7-1-静态代理"><a href="#7-1-静态代理" class="headerlink" title="7.1 静态代理"></a>7.1 静态代理</h4><p><img src= "/img/loading.gif" data-lazy-src="https://testchengzzz.oss-cn-shanghai.aliyuncs.com/img/20200818151638.png"></p><p>角色分析：</p><ul><li>抽象角色：一般使用接口或者抽象类来解决</li><li>真实角色：被代理的角色</li><li>代理角色：代理真实角色 ，代理真实角色后，我们一般会做一些附加操作</li><li>客户：访问代理对象的角色</li></ul><p>静态代理模式的好处：</p><ul><li>可以使得真实角色的操作更加纯粹，不用去关注一些公共的业务</li><li>公共业务交给代理角色，实现了业务的分工</li><li>公共业务发生扩展的时候方便集中管理</li></ul><p>静态代理模式的缺点：</p><ul><li>一个真实角色就会产生一个代理角色：代码量翻倍，开发效率变低</li></ul><p><code>AOP初识</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://testchengzzz.oss-cn-shanghai.aliyuncs.com/img/20200818151653.png"></p><hr><h4 id="7-2-动态代理"><a href="#7-2-动态代理" class="headerlink" title="7.2 动态代理"></a>7.2 动态代理</h4><ul><li>动态代理和静态代理角色一样</li><li>动态代理的类是动态生成的，不是直接写好的</li><li>动态代理分为两大类：基于接口的动态代理，基于类的动态代理<ul><li>基于接口—-JDK动态代理</li><li>基于类—-cglib</li><li>基于java字节码—-javassist</li></ul></li></ul><p>需要了解两个类 Proxy:代理，InvocationHandler:调用处理程序</p><pre class="language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;重写这个类，实现自动代理public class ProxyInvocationHandler implements InvocationHandler &#123;    &#x2F;&#x2F;被代理的接口    private Object target;    public void setTarget(Object target) &#123;        this.target &#x3D; target;    &#125;    &#x2F;&#x2F;得到代理类    public Object getProxy()&#123;        return Proxy.newProxyInstance(this.getClass().getClassLoader(),target.getClass().getInterfaces(),this);    &#125;    &#x2F;&#x2F;处理代理实例，并返回结果    @Override    public Object invoke(Object o, Method method, Object[] objects) throws Throwable &#123;        &#x2F;&#x2F;动态代理就是利用反射机制实现        Object result &#x3D; method.invoke(target, objects);        return result;    &#125;&#125;</code></pre><pre class="language-java" data-language="java"><code class="language-java">public class User &#123;    public static void main(String[] args) &#123;        &#x2F;&#x2F;真实角色        App app &#x3D; new App();        &#x2F;&#x2F;代理角色        ProxyInvocationHandler proxyInvocationHandler &#x3D; new ProxyInvocationHandler();        proxyInvocationHandler.setTarget(app);        Download proxy &#x3D; (Download) proxyInvocationHandler.getProxy();        proxy.download();    &#125;&#125;</code></pre><pre class="language-java" data-language="java"><code class="language-java">public interface Download &#123;    void download();&#125;</code></pre><pre class="language-java" data-language="java"><code class="language-java">public class App implements Download&#123;    @Override    public void download() &#123;        System.out.println(&quot;下载&quot;);    &#125;&#125;</code></pre><p>动态代理的优点：</p><ul><li>可以使得真实角色的操作更加纯粹，不用去关注一些公共的业务</li><li>公共业务交给代理角色，实现了业务的分工</li><li>公共业务发生扩展的时候方便集中管理</li><li>一个动态代理类可以代理多个类，只要是实现了同一个接口即可</li></ul><hr><h3 id="7-2-AOP实现方式一"><a href="#7-2-AOP实现方式一" class="headerlink" title="7.2 AOP实现方式一"></a>7.2 AOP实现方式一</h3><p><code>使用Spring的api</code></p><pre class="language-java" data-language="java"><code class="language-java">public class beforlog implements AfterReturningAdvice &#123;    @Override    public void afterReturning(Object o, Method method, Object[] objects, Object o1) throws Throwable &#123;        System.out.println(o1.getClass().getName()+&quot;----&quot;+method.getName());    &#125;&#125;</code></pre><pre class="language-xml" data-language="xml"><code class="language-xml">&lt;bean id&#x3D;&quot;services&quot; class&#x3D;&quot;com.chengzzz.services.ServicesImpl&quot;&#x2F;&gt;&lt;bean id&#x3D;&quot;log&quot; class&#x3D;&quot;com.chengzzz.log.beforlog&quot;&#x2F;&gt;&lt;aop:config&gt;    &lt;!--注册切点--&gt;    &lt;aop:pointcut id&#x3D;&quot;point&quot; expression&#x3D;&quot;execution(* com.chengzzz.services.ServicesImpl.*(..))&quot;&#x2F;&gt;    &lt;!--注册切入方式--&gt;    &lt;aop:advisor advice-ref&#x3D;&quot;log&quot; pointcut-ref&#x3D;&quot;point&quot;&#x2F;&gt;&lt;&#x2F;aop:config&gt;</code></pre><pre class="language-java" data-language="java"><code class="language-java">public class MyTest &#123;    public static void main(String[] args) &#123;      ApplicationContext context &#x3D; new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);        Services services &#x3D; context.getBean(&quot;services&quot;, Services.class);        services.query();    &#125;&#125;</code></pre><p><code>由于动态代理代理的是接口，所以getBean时，需要转换为接口</code></p><hr><h3 id="7-3-AOP实现方式二"><a href="#7-3-AOP实现方式二" class="headerlink" title="7.3 AOP实现方式二"></a>7.3 AOP实现方式二</h3><p><code>使用自定义类实现aop</code></p><pre class="language-java" data-language="java"><code class="language-java">public class DiyPointCut &#123;    public void before()&#123;        System.out.println(&quot;before&quot;);    &#125;    public void after()&#123;        System.out.println(&quot;after&quot;);    &#125;&#125;</code></pre><pre class="language-xml" data-language="xml"><code class="language-xml">&lt;!--切面对象--&gt;&lt;bean id&#x3D;&quot;diypoint&quot; class&#x3D;&quot;com.chengzzz.diy.DiyPointCut&quot;&#x2F;&gt;&lt;aop:config&gt;    &lt;!--自定义切面--&gt;    &lt;aop:aspect ref&#x3D;&quot;diypoint&quot; &gt;        &lt;!--注册切点--&gt;        &lt;aop:pointcut id&#x3D;&quot;point&quot; expression&#x3D;&quot;execution(* com.chengzzz.services.ServicesImpl.*(..))&quot;&#x2F;&gt;        &lt;!--注册通知，通知spring 什么时候（method&#x3D;&quot;before&quot; 即动态代理前后） 对切点执行什么方法（DiyPointCut中的方法）--&gt;        &lt;aop:before method&#x3D;&quot;before&quot; pointcut-ref&#x3D;&quot;point&quot;&#x2F;&gt;        &lt;aop:after method&#x3D;&quot;after&quot; pointcut-ref&#x3D;&quot;point&quot;&#x2F;&gt;    &lt;&#x2F;aop:aspect&gt;&lt;&#x2F;aop:config&gt;</code></pre><pre class="language-java" data-language="java"><code class="language-java">public class MyTest &#123;    public static void main(String[] args) &#123;      ApplicationContext context &#x3D; new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);        Services services &#x3D; context.getBean(&quot;services&quot;, Services.class);        services.query();    &#125;&#125;</code></pre><p><code>由于动态代理代理的是接口，所以getBean时，需要转换为接口</code></p><hr><h3 id="7-4-AOP实现方式三"><a href="#7-4-AOP实现方式三" class="headerlink" title="7.4 AOP实现方式三"></a>7.4 AOP实现方式三</h3><p><code>使用注解方式实现</code></p><pre class="language-java" data-language="java"><code class="language-java">@Aspectpublic class Annolog &#123;    @Before(&quot;execution(* com.chengzzz.services.ServicesImpl.*(..))&quot;)    public void before()&#123;        System.out.println(&quot;注解前置增强&quot;);    &#125;&#125;</code></pre><pre class="language-none"><code class="language-none">&lt;!--注入注解切面类--&gt;&lt;bean id&#x3D;&quot;annolog&quot; class&#x3D;&quot;com.chengzzz.log.Annolog&quot;&#x2F;&gt;&lt;!--开启自动代理注解支持--&gt;&lt;!--JDK默认proxy-target-class&#x3D;&quot;false&quot;  若为true 则使用cglib实现   结果无任何区别--&gt;&lt;aop:aspectj-autoproxy proxy-target-class&#x3D;&quot;false&quot;&#x2F;&gt;</code></pre><p><code>tips  @Around时，方法中可有参数ProceedingJoinPoint 以此获取部分信息</code></p><pre class="language-java" data-language="java"><code class="language-java">@Around(&quot;execution(* com.chengzzz.services.ServicesImpl.*(..))&quot;)public void around(ProceedingJoinPoint joinPoint) throws Throwable&#123;    System.out.println(&quot;注解环绕前&quot;+joinPoint.getSignature());   Object proceed &#x3D; joinPoint.proceed();    System.out.println(&quot;注解环绕后&quot;+proceed);&#125;</code></pre><pre class="language-java" data-language="java"><code class="language-java">public class MyTest &#123;    public static void main(String[] args) &#123;      ApplicationContext context &#x3D; new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);        Services services &#x3D; context.getBean(&quot;services&quot;, Services.class);        services.query();    &#125;&#125;</code></pre><p><code>由于动态代理代理的是接口，所以getBean时，需要转换为接口</code></p><hr><h2 id="整合Mybatis"><a href="#整合Mybatis" class="headerlink" title="整合Mybatis"></a>整合Mybatis</h2><ol><li><p>导入jar包</p><ul><li>junit</li><li>mybatis</li><li>mysql</li><li>spring</li><li>aop</li><li>mybatis-spring</li></ul><p>&lt;!–hexoPostRenderEscape:<pre class="language-xml" data-language="xml"><code class="language-xml">&lt;dependencies&gt;<br> &lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;junit&#x2F;junit --&gt;<br> &lt;dependency&gt;</p><pre><code> &amp;lt;groupId&amp;gt;junit&amp;lt;&amp;#x2F;groupId&amp;gt; &amp;lt;artifactId&amp;gt;junit&amp;lt;&amp;#x2F;artifactId&amp;gt; &amp;lt;version&amp;gt;4.12&amp;lt;&amp;#x2F;version&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;&amp;#x2F;scope&amp;gt;</code></pre><p> &lt;&#x2F;dependency&gt;<br> &lt;!– https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;mysql&#x2F;mysql-connector-java –&gt;<br> &lt;!– https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;mysql&#x2F;mysql-connector-java –&gt;<br> &lt;dependency&gt;</p><pre><code> &amp;lt;groupId&amp;gt;mysql&amp;lt;&amp;#x2F;groupId&amp;gt; &amp;lt;artifactId&amp;gt;mysql-connector-java&amp;lt;&amp;#x2F;artifactId&amp;gt; &amp;lt;version&amp;gt;8.0.21&amp;lt;&amp;#x2F;version&amp;gt;</code></pre><p> &lt;&#x2F;dependency&gt;</p><p> &lt;!– https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.mybatis&#x2F;mybatis –&gt;<br> &lt;dependency&gt;</p><pre><code> &amp;lt;groupId&amp;gt;org.mybatis&amp;lt;&amp;#x2F;groupId&amp;gt; &amp;lt;artifactId&amp;gt;mybatis&amp;lt;&amp;#x2F;artifactId&amp;gt; &amp;lt;version&amp;gt;3.5.5&amp;lt;&amp;#x2F;version&amp;gt;</code></pre><p> &lt;&#x2F;dependency&gt;</p><p> &lt;!– https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.springframework&#x2F;spring-webmvc –&gt;<br> &lt;dependency&gt;</p><pre><code> &amp;lt;groupId&amp;gt;org.springframework&amp;lt;&amp;#x2F;groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-webmvc&amp;lt;&amp;#x2F;artifactId&amp;gt; &amp;lt;version&amp;gt;5.2.7.RELEASE&amp;lt;&amp;#x2F;version&amp;gt;</code></pre><p> &lt;&#x2F;dependency&gt;<br> &lt;!– https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.springframework&#x2F;spring-jdbc –&gt;<br> &lt;dependency&gt;</p><pre><code> &amp;lt;groupId&amp;gt;org.springframework&amp;lt;&amp;#x2F;groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-jdbc&amp;lt;&amp;#x2F;artifactId&amp;gt; &amp;lt;version&amp;gt;5.2.7.RELEASE&amp;lt;&amp;#x2F;version&amp;gt;</code></pre><p> &lt;&#x2F;dependency&gt;<br> &lt;!– https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.aspectj&#x2F;aspectjweaver –&gt;<br> &lt;dependency&gt;</p><pre><code> &amp;lt;groupId&amp;gt;org.aspectj&amp;lt;&amp;#x2F;groupId&amp;gt; &amp;lt;artifactId&amp;gt;aspectjweaver&amp;lt;&amp;#x2F;artifactId&amp;gt; &amp;lt;version&amp;gt;1.9.5&amp;lt;&amp;#x2F;version&amp;gt;</code></pre><p> &lt;&#x2F;dependency&gt;</p><p> &lt;!– https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.mybatis&#x2F;mybatis-spring –&gt;<br> &lt;dependency&gt;</p><pre><code> &amp;lt;groupId&amp;gt;org.mybatis&amp;lt;&amp;#x2F;groupId&amp;gt; &amp;lt;artifactId&amp;gt;mybatis-spring&amp;lt;&amp;#x2F;artifactId&amp;gt; &amp;lt;version&amp;gt;2.0.5&amp;lt;&amp;#x2F;version&amp;gt;</code></pre><p> &lt;&#x2F;dependency&gt;</p></li></ol><p>&lt;&#x2F;dependencies&gt;</code></pre>:hexoPostRenderEscape–&gt;</p><ol start="2"><li>编写配置文件</li></ol><ol start="3"><li>测试</li></ol><h3 id="8-1-整合方式一"><a href="#8-1-整合方式一" class="headerlink" title="8.1 整合方式一"></a>8.1 整合方式一</h3><p>mybatis-config</p><pre class="language-xml" data-language="xml"><code class="language-xml">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;       xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context.xsd&quot;&gt;    &lt;bean id&#x3D;&quot;dataSource&quot;          class&#x3D;&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;    &gt;        &lt;property name&#x3D;&quot;driverClassName&quot;                  value&#x3D;&quot;com.mysql.jdbc.Driver&quot; &#x2F;&gt;        &lt;property name&#x3D;&quot;url&quot; value&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;mybatis?useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf8&amp;useSSL&#x3D;true&amp;serverTimezone&#x3D;UTC&quot; &#x2F;&gt;        &lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;root&quot; &#x2F;&gt;        &lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;root&quot; &#x2F;&gt;    &lt;&#x2F;bean&gt;    &lt;!-- 创建SqlSessionFactory MyBatis会话工厂对象 --&gt;    &lt;bean id&#x3D;&quot;sqlSessionFactory&quot;  class&#x3D;&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;        &lt;property name&#x3D;&quot;dataSource&quot; ref&#x3D;&quot;dataSource&quot; &#x2F;&gt;        &lt;property name&#x3D;&quot;mapperLocations&quot; value&#x3D;&quot;classpath:com&#x2F;chengzzz&#x2F;mapper&#x2F;*.xml&quot;&#x2F;&gt;        &lt;property name&#x3D;&quot;typeAliasesPackage&quot; value&#x3D;&quot;com.chengzzz.pojo&quot;&#x2F;&gt;    &lt;&#x2F;bean&gt;    &lt;bean id&#x3D;&quot;sqlSession&quot; class&#x3D;&quot;org.mybatis.spring.SqlSessionTemplate&quot; &gt;        &lt;constructor-arg index&#x3D;&quot;0&quot; ref&#x3D;&quot;sqlSessionFactory&quot;&#x2F;&gt;    &lt;&#x2F;bean&gt;&lt;&#x2F;beans&gt;</code></pre><p>beans.xml</p><pre class="language-xml" data-language="xml"><code class="language-xml">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;       xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context.xsd&quot;&gt;    &lt;import resource&#x3D;&quot;mybatis-config.xml&quot;&#x2F;&gt;   &lt;bean id&#x3D;&quot;userMapper&quot; class&#x3D;&quot;com.chengzzz.mapper.UserMapperImpl&quot;&gt;   &lt;property name&#x3D;&quot;sqlSession&quot; ref&#x3D;&quot;sqlSession&quot;&#x2F;&gt;   &lt;&#x2F;bean&gt;&lt;&#x2F;beans&gt;</code></pre><p><code>Tips 注意 若未配置别名，mapper中返回类型需完整路径</code></p><p><code>实现过程</code></p><ol><li>编写数据源配置</li><li>sqlSessionFactory</li><li>sqlSessionTemplate</li><li>需要给接口加实现类</li><li>将实现类注入Spring</li><li>Test   </li></ol><hr><h3 id="8-2-整合方式二"><a href="#8-2-整合方式二" class="headerlink" title="8.2 整合方式二"></a>8.2 整合方式二</h3><p> 在usermapper的实现类中继承SqlSessionDaoSupport</p><p>通过spring的api来获取sqlTemplate</p><pre class="language-java" data-language="java"><code class="language-java">public class UserMapperImpl2 extends SqlSessionDaoSupport implements UserMapper&#123;    @Override    public List&lt;User&gt; selectList() &#123;        return getSqlSession().getMapper(UserMapper.class).selectList();    &#125;&#125;</code></pre><p>同时在spring中注册这个bean时</p><pre class="language-xml" data-language="xml"><code class="language-xml">&lt;bean id&#x3D;&quot;userMapper2&quot; class&#x3D;&quot;com.chengzzz.mapper.UserMapperImpl2&quot;&gt;    &lt;property name&#x3D;&quot;sqlSessionFactory&quot; ref&#x3D;&quot;sqlSessionFactory&quot;&#x2F;&gt;&lt;&#x2F;bean&gt;</code></pre><p>将sqlSessionFactory注入即可省略sqlSessionTemplate的配置</p><hr><h2 id="声明式事务"><a href="#声明式事务" class="headerlink" title="声明式事务"></a>声明式事务</h2><h3 id="9-1-事务特点"><a href="#9-1-事务特点" class="headerlink" title="9.1 事务特点"></a>9.1 事务特点</h3><ul><li>将一组业务视为一个业务来实现，要么都成功，要么都失败</li><li>事务在项目开发中，十分重要，涉及到数据的一致性问题，不能马虎</li><li>确保完整性和一致性</li></ul><h3 id="9-2-事务的ACID原则"><a href="#9-2-事务的ACID原则" class="headerlink" title="9.2 事务的ACID原则"></a>9.2 事务的ACID原则</h3><ul><li><p>原子性 确保都失败或都成功。</p></li><li><p>一致性 确保资源状态统一。</p></li><li><p>隔离性</p><ul><li>多个业务操作同一个资源时，防止数据损坏。</li></ul></li><li><p>持久性</p><ul><li>事务一旦提交无论系统发生什么问题，结果都不会再被影响，被持久化地写到存储器中。</li></ul></li></ul><h3 id="9-3-声明式事务的使用"><a href="#9-3-声明式事务的使用" class="headerlink" title="9.3 声明式事务的使用"></a>9.3 声明式事务的使用</h3><ul><li>声明式事务：AOP的应用，非侵入式，横切</li></ul><pre class="language-xml" data-language="xml"><code class="language-xml">&lt;!--配置声明式事务--&gt;    &lt;bean id&#x3D;&quot;transactionManager&quot; class&#x3D;&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;        &lt;property name&#x3D;&quot;dataSource&quot; ref&#x3D;&quot;dataSource&quot;&#x2F;&gt;    &lt;&#x2F;bean&gt;    &lt;!--使用AOP实现事务的织入--&gt;    &lt;!--配置事务通知--&gt;    &lt;tx:advice id&#x3D;&quot;txAdvice&quot; transaction-manager&#x3D;&quot;transactionManager&quot;&gt;        &lt;!--给哪些方法配置事务--&gt;        &lt;!--事务的7种传播特性--&gt;        &lt;tx:attributes&gt;            &lt;tx:method name&#x3D;&quot;*&quot; propagation&#x3D;&quot;REQUIRED&quot;&#x2F;&gt;        &lt;&#x2F;tx:attributes&gt;    &lt;&#x2F;tx:advice&gt;    &lt;!--配置事务的切入--&gt;    &lt;aop:config&gt;        &lt;aop:pointcut id&#x3D;&quot;point&quot; expression&#x3D;&quot;execution(* com.chengzzz.mapper.*.*(..))&quot;&#x2F;&gt;        &lt;aop:advisor advice-ref&#x3D;&quot;txAdvice&quot; pointcut-ref&#x3D;&quot;point&quot;&#x2F;&gt;    &lt;&#x2F;aop:config&gt;</code></pre><ul><li>编程式事务：需要在代码中，进行事务的管理</li></ul><p><code>Tips</code></p><p>为什么需要事务？</p><ul><li>如果不配置事务，可能存在数据提交不一致的情况</li><li>如果我们不在Spring中去配置声明式事务，就需要在代码中手动配置事务</li><li>事务在项目的开发中，十分重要涉及到数据的一致性和完整性问题，不容马虎</li></ul><hr><hr><hr><hr>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring boot 踩坑记录</title>
      <link href="/2020/08/18/Spring%20boot%20%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/"/>
      <url>/2020/08/18/Spring%20boot%20%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[    <div id="aplayer-ABfZhZFC" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="5186066572" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"    ></div><h1 id="Spring-boot-踩坑记录"><a href="#Spring-boot-踩坑记录" class="headerlink" title="Spring boot 踩坑记录"></a>Spring boot 踩坑记录</h1><h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><p>[TOC]</p><h3 id="Tests-run-1-Failures-0-Errors-1-Skipped-0-Time-elapsed-2-432-s-lt-lt-lt-FAILURE-in-com-ems-web-WebApplicationTests"><a href="#Tests-run-1-Failures-0-Errors-1-Skipped-0-Time-elapsed-2-432-s-lt-lt-lt-FAILURE-in-com-ems-web-WebApplicationTests" class="headerlink" title="Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 2.432 s &lt;&lt;&lt; FAILURE! - in com.ems.web.WebApplicationTests"></a>Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 2.432 s &lt;&lt;&lt; FAILURE! - in com.ems.web.WebApplicationTests</h3><p>解决方案</p><p>在pom.xml中添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;plugin&gt;<br>    &lt;groupId&gt;org.apache.maven.plugins&lt;&#x2F;groupId&gt;<br>    &lt;artifactId&gt;maven-surefire-plugin&lt;&#x2F;artifactId&gt;<br>    &lt;configuration&gt;<br>     &lt;skip&gt;true&lt;&#x2F;skip&gt;<br>    &lt;&#x2F;configuration&gt;<br>   &lt;&#x2F;plugin&gt;<br></code></pre></td></tr></table></figure><p>————————————————<br>版权声明：本文为CSDN博主「漫跑的小乌龟」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/HHHbetter123/java/article/details/78561642">https://blog.csdn.net/HHHbetter123/java/article/details/78561642</a></p><hr><h3 id="打包后target目录找不到"><a href="#打包后target目录找不到" class="headerlink" title="打包后target目录找不到"></a>打包后target目录找不到</h3><p><img src= "/img/loading.gif" data-lazy-src="https://testchengzzz.oss-cn-shanghai.aliyuncs.com/img/20200822170335.png"></p><hr><h3 id="Failed-to-execute-goal-org-apache-maven-plugins-maven-install-plugin-2-5-2-install-default"><a href="#Failed-to-execute-goal-org-apache-maven-plugins-maven-install-plugin-2-5-2-install-default" class="headerlink" title="Failed to execute goal org.apache.maven.plugins:maven-install-plugin:2.5.2:install (default-"></a>Failed to execute goal org.apache.maven.plugins:maven-install-plugin:2.5.2:install (default-</h3><p>[ERROR] Failed to execute goal org.apache.maven.plugins:maven-install-plugin:2.5.2:install (default-install) on project commons-base: Failed to install artifact <a href="http://com.xxx/">com.xxx</a>:commons-base:jar:</p><p>使用Lifecycle下的 install打包即可</p><hr><h2 id="Mybatis-plus"><a href="#Mybatis-plus" class="headerlink" title="Mybatis-plus"></a>Mybatis-plus</h2><h3 id="Could-not-set-property-‘id’-of-‘class-com-xxx-xxx-xx-PO’-with-value-‘1312434545453’"><a href="#Could-not-set-property-‘id’-of-‘class-com-xxx-xxx-xx-PO’-with-value-‘1312434545453’" class="headerlink" title="Could not set property ‘id’ of ‘class com.xxx.xxx.xx.PO’ with value ‘1312434545453’"></a>Could not set property ‘id’ of ‘class com.xxx.xxx.xx.PO’ with value ‘1312434545453’</h3><p><img src= "/img/loading.gif" data-lazy-src="https://testchengzzz.oss-cn-shanghai.aliyuncs.com/img/20200822161514.png"></p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安卓蚂蚁森林能量脚本</title>
      <link href="/2020/08/18/%E5%AE%89%E5%8D%93%E8%9A%82%E8%9A%81%E6%A3%AE%E6%9E%97%E8%83%BD%E9%87%8F%E8%84%9A%E6%9C%AC-%E6%97%A0%E9%9A%9C%E7%A2%8D%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/08/18/%E5%AE%89%E5%8D%93%E8%9A%82%E8%9A%81%E6%A3%AE%E6%9E%97%E8%83%BD%E9%87%8F%E8%84%9A%E6%9C%AC-%E6%97%A0%E9%9A%9C%E7%A2%8D%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[    <div id="aplayer-KvjcmYLl" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="5186066572" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"    ></div><p><a href="https://github.com/YYYet/ant-forest-easyclick">开源地址</a></p><h1 id="安卓蚂蚁森林能量脚本-无障碍模式"><a href="#安卓蚂蚁森林能量脚本-无障碍模式" class="headerlink" title="安卓蚂蚁森林能量脚本-无障碍模式"></a>安卓蚂蚁森林能量脚本-无障碍模式</h1><h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><ul><li><input checked="" disabled="" type="checkbox"> 收自己+偷列表 </li><li><input checked="" disabled="" type="checkbox"> 收别人浇给自己的水</li><li><input checked="" disabled="" type="checkbox"> 帮列表收能量</li></ul><h4 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h4><ul><li><input checked="" disabled="" type="checkbox"> 定时模式 (手动定时启动脚本)</li><li><input checked="" disabled="" type="checkbox"> 挂机模式 (循环挂机运行脚本)</li><li><input disabled="" type="checkbox"> 自动模式 (自动检测好友能量成熟剩余时间并定时运行脚本)</li></ul><blockquote><p> 以上为已完成的功能</p></blockquote><hr><h4 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h4><p>安装软件并给予申请的三个权限</p><p>下拉通知栏观察无障碍模式是否启动</p><p><img src= "/img/loading.gif" data-lazy-src="https://testchengzzz.oss-cn-shanghai.aliyuncs.com/img/20200818145614.png"></p><p>如图未启动则打开使用权限页面，点击启动环境</p><p><img src= "/img/loading.gif" data-lazy-src="https://testchengzzz.oss-cn-shanghai.aliyuncs.com/img/20200818145630.png"></p><p>悬浮窗权限自行选择是否打开，打开之后重启软件，将会显示日志窗口</p><p><img src= "/img/loading.gif" data-lazy-src="https://testchengzzz.oss-cn-shanghai.aliyuncs.com/img/20200818145653.png"></p><p>点击参数设置</p><p><img src= "/img/loading.gif" data-lazy-src="https://testchengzzz.oss-cn-shanghai.aliyuncs.com/img/20200818145709.png"></p><p>选择模式</p><p><img src= "/img/loading.gif" data-lazy-src="https://testchengzzz.oss-cn-shanghai.aliyuncs.com/img/20200818145721.png"></p><p>选择模式后点击保存参数，再点击启动脚本即可</p><p><img src= "/img/loading.gif" data-lazy-src="https://testchengzzz.oss-cn-shanghai.aliyuncs.com/img/20200818145729.png"></p><blockquote><p>注意</p><p><img src= "/img/loading.gif" data-lazy-src="https://testchengzzz.oss-cn-shanghai.aliyuncs.com/img/20200818145742.png"></p><p>定时模式下，填写时间后选择开启定时</p><p>脚本如果长期运行，建议开启屏幕常亮</p></blockquote><hr><h4 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h4><ul><li><p>点击启动环境后无反应或者卡住</p><p>直接清除后台后重新运行软件点击启动环境</p></li><li><p>我开启了无障碍却仍然提示我打开无障碍</p><p>直接清除后台后重新运行软件，然后重新点击启动环境，若没有解决可重启设备</p></li><li><p>脚本部分功能无效</p><p>直接清除后台后重新运行软件点击启动环境</p></li><li><p>无法识别能量罩</p><p>将日志窗口关闭或者拖动到左下角</p></li></ul><hr><h4 id="计划功能"><a href="#计划功能" class="headerlink" title="计划功能"></a>计划功能</h4><ul><li><input disabled="" type="checkbox"> 加入刷步攒能量</li><li><input disabled="" type="checkbox"> 加入批量浇水</li><li><input disabled="" type="checkbox"> 加入运行统计</li><li><input disabled="" type="checkbox"> 加入自动模式</li><li><input disabled="" type="checkbox"> 加入屏幕唤醒及解锁</li></ul><p>​      </p><hr><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>脚本采用EasyClick编写，由于刚接触所以代码质量不高，此项目旨在学习和提高安卓脚本水平</p><p>另外发现github上大佬 SuperMonster003 也在论坛 </p><p>他的帖子<a href="https://www.52pojie.cn/thread-1117218-1-1.html">https://www.52pojie.cn/thread-1117218-1-1.html</a> </p><p>他的主页<a href="https://github.com/SuperMonster003">https://github.com/SuperMonster003</a></p><hr><h4 id="下载链接"><a href="#下载链接" class="headerlink" title="下载链接"></a>下载链接</h4><p><a href="https://lanzous.com/b0cq9z3ef">https://lanzous.com/b0cq9z3ef</a>  密码:7nh2</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>乐心健康修改wx zfb qq步数</title>
      <link href="/2020/08/17/%E4%B9%90%E5%BF%83%E5%81%A5%E5%BA%B7/"/>
      <url>/2020/08/17/%E4%B9%90%E5%BF%83%E5%81%A5%E5%BA%B7/</url>
      
        <content type="html"><![CDATA[<h2 id="乐心健康"><a href="#乐心健康" class="headerlink" title="乐心健康"></a>乐心健康</h2>    <div id="aplayer-szQrrIix" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="5186066572" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"    ></div><h1 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h1><p>此程序不调用任何第三方接口，不参与任何非法项目，仅供网络编程学习以及参考。</p><p>自动步数提交已经完成，由于需要上传乐心账号和设备信息等相关信息，乐心账号即为手机号，论坛判为隐私，这里上传无自动提交版本。即不上传任何信息到个人服务器（除了提交相关信息到乐心官方）</p><p><a href="https://github.com/YYYet/Cz-">开源地址</a></p><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>下载乐某健康APP:</p><p>1.从应用商店或者浏览器下载某心健康App，打开软件并选择手机号登录</p><p><img src= "/img/loading.gif" data-lazy-src="https://txc.gtimg.com/data/130280/2020/0320/1fd9360ff94b7e606fb6607cd5739092.jpeg" alt="1fd9360ff94b7e606fb6607cd5739092.jpeg"></p><p>2.登录之后，点击我的-&gt;设置-&gt;账号与安全-&gt;设置密码(修改密码)，设置你自己记得住的密码</p><p><img src= "/img/loading.gif" data-lazy-src="https://txc.gtimg.com/data/140335/2020/0502/a1c13cfe0dfbf3863cad2838ebfa3009.jpeg" alt="a1c13cfe0dfbf3863cad2838ebfa3009.jpeg"></p><p>3.回到App首页，点击我的-&gt;数据共享，绑定你想同步数据的项目</p><p>注：同步微信运动请按照要求关注【<strong>乐心运动</strong>】公众号。</p><p><img src= "/img/loading.gif" data-lazy-src="https://txc.gtimg.com/data/140335/2020/0507/7bb37ab660a893db887bdddf203122eb.jpeg" alt="7bb37ab660a893db887bdddf203122eb.jpeg"></p><p>4.回到Cz步数助手，依次输入乐心账号（注册乐心的手机号），字母验证码，短信验证码，需要刷的步数，然后点击提交，少数情况需要滑动拼图验证码进行验证。然后步数即可自动同步至你绑定的所有平台。</p><p><img src= "/img/loading.gif" data-lazy-src="https://txc.gtimg.com/data/95845/2020/0612/bbfeeeab7ba95dfabd4bae6e667f4001.jpeg" alt="bbfeeeab7ba95dfabd4bae6e667f4001.jpeg"></p><h2 id="会持续更新吗"><a href="#会持续更新吗" class="headerlink" title="会持续更新吗"></a>会持续更新吗</h2><ol><li><p>我会在空闲时间关注Cz步数助手的走向</p></li><li><p>如果产生不良影响我将第一时间对软件进行处理</p></li></ol><h2 id="软件相关问题"><a href="#软件相关问题" class="headerlink" title="软件相关问题"></a>软件相关问题</h2><h3 id="为什么我的步数不能同步"><a href="#为什么我的步数不能同步" class="headerlink" title="为什么我的步数不能同步"></a>为什么我的步数不能同步</h3><ol><li>成功提交，即乐心健康中有显示，却未同步至wx qq zfb 请参考上方使用说明，自行测试。如果还是同步不了，大可放弃使用，软件免费，我也没有什么精力做售后</li><li>如果提示未知，那么在cookie页面。长按删除，再重新返回主页面登录一次即可</li><li>登录时提示短信验证码已达上限，那么今天就无法使用验证码登录了，这个是官方的限制。第二天即可恢复</li></ol><h3 id="软件时常崩溃"><a href="#软件时常崩溃" class="headerlink" title="软件时常崩溃"></a>软件时常崩溃</h3><ol><li><p>应用基于安卓4.4开发，低于4.4无法使用</p></li><li><p>52pj为唯一发布平台，现移植到个人博客。如果遇到了非版本崩溃问题，请评论回复  在什么情况下遇到的问题+问题出现频率 </p></li></ol><h3 id="IOS可以使用吗"><a href="#IOS可以使用吗" class="headerlink" title="IOS可以使用吗"></a>IOS可以使用吗</h3><ol><li>目前只支持android并未支持ios</li></ol><h3 id="支持哪些应用改步数"><a href="#支持哪些应用改步数" class="headerlink" title="支持哪些应用改步数"></a>支持哪些应用改步数</h3><ol><li><p>支付宝</p></li><li><p>微信</p></li><li><p>QQ</p></li></ol><h3 id="需要root吗"><a href="#需要root吗" class="headerlink" title="需要root吗"></a>需要root吗</h3><p>不需要</p><h3 id="收费吗"><a href="#收费吗" class="headerlink" title="收费吗"></a>收费吗</h3><p>免费</p><h3 id="最高支持多少"><a href="#最高支持多少" class="headerlink" title="最高支持多少"></a>最高支持多少</h3><p>最高10W步  未具体测试</p><h3 id="相关说明"><a href="#相关说明" class="headerlink" title="相关说明"></a>相关说明</h3><p>第一次请使用手机号登录 然后修改，手机号每天只允许发送三次验证码（官方限制）且用且珍惜</p><p>使用手机号登录修改过之后，可以使用首页底部的使用cookie修改  不需要手机号登录即可  直到失效后 再次手机号登录一次就可以</p><h1 id="应用说明"><a href="#应用说明" class="headerlink" title="应用说明"></a>应用说明</h1><p>注册过账号之后，打开Cz步数助手进行账号登录</p><p>输入图片验证码以及短信验证码后 提示保存成功 </p><p>返回首页，使用cookie进行修改步数，以此避免每日短信3次上限</p><p>若cookie失效，请手动删除后再次短信登录，否则会提示保存失败</p><h2 id="运行截图"><a href="#运行截图" class="headerlink" title="运行截图"></a>运行截图</h2><p><img src= "/img/loading.gif" data-lazy-src="https://testchengzzz.oss-cn-shanghai.aliyuncs.com/img/FABBB34A30DEB0D6FC396992E172E7E5.jpg" style="zoom:25%;" /><img src= "/img/loading.gif" data-lazy-src="https://testchengzzz.oss-cn-shanghai.aliyuncs.com/img/78D58C3360A125EE9BFD0428F62FF824.jpg" style="zoom: 25%;" /></p><h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p>蓝奏云 <a href="https://chengzzz.lanzous.com/b0cqeofyb">https://chengzzz.lanzous.com/b0cqeofyb</a><br>密码:b42o</p><p>2020 8 12更新版本支持密码登录</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 抓包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo的安装使用</title>
      <link href="/2020/08/16/hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2020/08/16/hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="hexo-matery"><a href="#hexo-matery" class="headerlink" title="hexo+matery"></a>hexo+matery</h2>    <div id="aplayer-fubUhDae" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="5186066572" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"    ></div><h3 id="首先安装nodejs，官网一键安装即可"><a href="#首先安装nodejs，官网一键安装即可" class="headerlink" title="首先安装nodejs，官网一键安装即可"></a>首先安装nodejs，官网一键安装即可</h3><h3 id="新建一个目录，并安装hexo"><a href="#新建一个目录，并安装hexo" class="headerlink" title="新建一个目录，并安装hexo"></a>新建一个目录，并安装hexo</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$  npm install -g hexo-cli</code></pre><h3 id="安装完成之后，使用hexo进行模板生成"><a href="#安装完成之后，使用hexo进行模板生成" class="headerlink" title="安装完成之后，使用hexo进行模板生成"></a>安装完成之后，使用hexo进行模板生成</h3><pre class="language-bash" data-language="bash"><code class="language-bash">Yet@DESKTOP-9S7FNJU MINGW64 &#x2F;g&#x2F;github&#x2F;blog$ hexo init</code></pre><h3 id="如果找不到hexo-那么将G-nodejs-node-global-node-modules-hexo-cli-bin-加入path-即-搜索hexo将bin加入环境变量"><a href="#如果找不到hexo-那么将G-nodejs-node-global-node-modules-hexo-cli-bin-加入path-即-搜索hexo将bin加入环境变量" class="headerlink" title="如果找不到hexo 那么将G:\nodejs\node_global\node_modules\hexo-cli\bin  加入path 即 搜索hexo将bin加入环境变量"></a>如果找不到hexo 那么将G:\nodejs\node_global\node_modules\hexo-cli\bin  加入path 即 搜索hexo将bin加入环境变量</h3><h3 id="如果提示：-hexo-server-Usage-hexo-，是因为hexo-3以后的版本需要手动安装server模块，执行下面的命令：npm-install-hexo-server-–save"><a href="#如果提示：-hexo-server-Usage-hexo-，是因为hexo-3以后的版本需要手动安装server模块，执行下面的命令：npm-install-hexo-server-–save" class="headerlink" title="如果提示： hexo server Usage: hexo ，是因为hexo 3以后的版本需要手动安装server模块，执行下面的命令：npm install hexo-server –save"></a>如果提示： hexo server Usage: hexo <command>，是因为hexo 3以后的版本需要手动安装server模块，执行下面的命令：npm install hexo-server –save</h3><pre class="language-bash" data-language="bash"><code class="language-bash">Yet@DESKTOP-9S7FNJU MINGW64 &#x2F;g&#x2F;github&#x2F;blog$ npm install hexo-server --save</code></pre><h3 id="如果提示"><a href="#如果提示" class="headerlink" title="如果提示"></a>如果提示</h3><p>ERROR Deployer not found: git</p><h3 id="那么输入以下命令即可"><a href="#那么输入以下命令即可" class="headerlink" title="那么输入以下命令即可"></a>那么输入以下命令即可</h3><pre class="language-bash" data-language="bash"><code class="language-bash">npm install &#96;--&#96;save hexo-deployer-git</code></pre><h3 id="返回目录，修改-config-yml中的deploy"><a href="#返回目录，修改-config-yml中的deploy" class="headerlink" title="返回目录，修改_config.yml中的deploy"></a>返回目录，修改_config.yml中的deploy</h3><pre class="language-yml" data-language="yml"><code class="language-yml">deploy:  type: git  repo: https:&#x2F;&#x2F;github.com&#x2F;YYYet&#x2F;YYYet.github.io.git  branch: master</code></pre><h3 id="进行提交-g为生成静态页面-d为上传"><a href="#进行提交-g为生成静态页面-d为上传" class="headerlink" title="进行提交 g为生成静态页面 -d为上传"></a>进行提交 g为生成静态页面 -d为上传</h3><pre class="language-bash" data-language="bash"><code class="language-bash">Yet@DESKTOP-9S7FNJU MINGW64 &#x2F;g&#x2F;github&#x2F;blog$ hexo g -d</code></pre><p>此命令为开启本地调试 <a href="http://localhost:4000/">http://localhost:4000/</a></p><pre class="language-bash" data-language="bash"><code class="language-bash">Yet@DESKTOP-9S7FNJU MINGW64 &#x2F;g&#x2F;github&#x2F;blog$ hexo s</code></pre><h3 id="访问YYYet-github-io-git即可"><a href="#访问YYYet-github-io-git即可" class="headerlink" title="访问YYYet.github.io.git即可"></a>访问YYYet.github.io.git即可</h3>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
